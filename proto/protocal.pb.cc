// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace XZProto {

namespace {

const ::google::protobuf::Descriptor* trigger_snapone_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  trigger_snapone_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* change_running_mode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  change_running_mode_reflection_ = NULL;
const ::google::protobuf::Descriptor* recfg_param_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  recfg_param_reflection_ = NULL;
const ::google::protobuf::Descriptor* cam_ctrl_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cam_ctrl_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* value_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  value_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* tree_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tree_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* tree_cfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tree_cfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* enc_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enc_msg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* enum_cmd_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enum_running_mode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enum_value_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocal_2eproto() {
  protobuf_AddDesc_protocal_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocal.proto");
  GOOGLE_CHECK(file != NULL);
  trigger_snapone_info_descriptor_ = file->message_type(0);
  static const int trigger_snapone_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trigger_snapone_info, uint32_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trigger_snapone_info, uint32_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trigger_snapone_info, uint32_id_),
  };
  trigger_snapone_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      trigger_snapone_info_descriptor_,
      trigger_snapone_info::default_instance_,
      trigger_snapone_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trigger_snapone_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trigger_snapone_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(trigger_snapone_info));
  change_running_mode_descriptor_ = file->message_type(1);
  static const int change_running_mode_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_running_mode, uint32_input_src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_running_mode, uint32_running_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_running_mode, uint32_auto_run_),
  };
  change_running_mode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      change_running_mode_descriptor_,
      change_running_mode::default_instance_,
      change_running_mode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_running_mode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_running_mode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(change_running_mode));
  recfg_param_descriptor_ = file->message_type(2);
  static const int recfg_param_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recfg_param, uint32_camid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recfg_param, uint32_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recfg_param, uint32_gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recfg_param, uint32_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recfg_param, uint32_rgain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recfg_param, uint32_ggain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recfg_param, uint32_bgain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recfg_param, uint32_set_if_trigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recfg_param, uint32_exp2_),
  };
  recfg_param_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      recfg_param_descriptor_,
      recfg_param::default_instance_,
      recfg_param_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recfg_param, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recfg_param, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(recfg_param));
  cam_ctrl_msg_descriptor_ = file->message_type(3);
  static const int cam_ctrl_msg_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cam_ctrl_msg, uint32_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cam_ctrl_msg, uint32_need_img_process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cam_ctrl_msg, uint32_need_storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cam_ctrl_msg, uint32_need_display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cam_ctrl_msg, uint32_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cam_ctrl_msg, uint64_sync_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cam_ctrl_msg, uint64_trigger_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cam_ctrl_msg, uint64_frame_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cam_ctrl_msg, uint32_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cam_ctrl_msg, uint32_trigger_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cam_ctrl_msg, uint32_pysic_camid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cam_ctrl_msg, uint32_running_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cam_ctrl_msg, uint32_need_feed_back_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cam_ctrl_msg, uint32_product_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cam_ctrl_msg, uint32_reprocess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cam_ctrl_msg, msg_change_running_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cam_ctrl_msg, rpt_msg_recfg_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cam_ctrl_msg, uint32_inner_camid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cam_ctrl_msg, str_serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cam_ctrl_msg, uint32_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cam_ctrl_msg, debug_file_name1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cam_ctrl_msg, debug_file_name2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cam_ctrl_msg, debug_file_name3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cam_ctrl_msg, debug_file_name4_),
  };
  cam_ctrl_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cam_ctrl_msg_descriptor_,
      cam_ctrl_msg::default_instance_,
      cam_ctrl_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cam_ctrl_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cam_ctrl_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cam_ctrl_msg));
  value_item_descriptor_ = file->message_type(4);
  static const int value_item_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_item, str_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_item, uint32_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_item, uint32_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_item, str_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_item, uint32_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_item, double_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_item, rpt_str_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_item, uint32_invisibale_),
  };
  value_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      value_item_descriptor_,
      value_item::default_instance_,
      value_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(value_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(value_item));
  tree_item_descriptor_ = file->message_type(5);
  static const int tree_item_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tree_item, str_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tree_item, uint32_bchecked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tree_item, rpt_msg_value_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tree_item, rpt_msg_tree_item_),
  };
  tree_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tree_item_descriptor_,
      tree_item::default_instance_,
      tree_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tree_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tree_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tree_item));
  tree_cfg_descriptor_ = file->message_type(6);
  static const int tree_cfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tree_cfg, rpt_msg_tree_item_),
  };
  tree_cfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tree_cfg_descriptor_,
      tree_cfg::default_instance_,
      tree_cfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tree_cfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tree_cfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tree_cfg));
  enc_msg_descriptor_ = file->message_type(7);
  static const int enc_msg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enc_msg, uint32_year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enc_msg, bytes_randon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enc_msg, uint32_month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enc_msg, uint32_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enc_msg, bytes_serial_),
  };
  enc_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      enc_msg_descriptor_,
      enc_msg::default_instance_,
      enc_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enc_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enc_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(enc_msg));
  enum_cmd_descriptor_ = file->enum_type(0);
  enum_running_mode_descriptor_ = file->enum_type(1);
  enum_value_type_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocal_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    trigger_snapone_info_descriptor_, &trigger_snapone_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    change_running_mode_descriptor_, &change_running_mode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    recfg_param_descriptor_, &recfg_param::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cam_ctrl_msg_descriptor_, &cam_ctrl_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    value_item_descriptor_, &value_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tree_item_descriptor_, &tree_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tree_cfg_descriptor_, &tree_cfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    enc_msg_descriptor_, &enc_msg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocal_2eproto() {
  delete trigger_snapone_info::default_instance_;
  delete trigger_snapone_info_reflection_;
  delete change_running_mode::default_instance_;
  delete change_running_mode_reflection_;
  delete recfg_param::default_instance_;
  delete recfg_param_reflection_;
  delete cam_ctrl_msg::default_instance_;
  delete cam_ctrl_msg_reflection_;
  delete value_item::default_instance_;
  delete value_item_reflection_;
  delete tree_item::default_instance_;
  delete tree_item_reflection_;
  delete tree_cfg::default_instance_;
  delete tree_cfg_reflection_;
  delete enc_msg::default_instance_;
  delete enc_msg_reflection_;
}

void protobuf_AddDesc_protocal_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016protocal.proto\022\007XZProto\"S\n\024trigger_sna"
    "pone_info\022\024\n\014uint32_group\030\001 \001(\r\022\022\n\nuint3"
    "2_seq\030\002 \001(\r\022\021\n\tuint32_id\030\003 \001(\r\"e\n\023change"
    "_running_mode\022\030\n\020uint32_input_src\030\001 \001(\r\022"
    "\033\n\023uint32_running_mode\030\002 \001(\r\022\027\n\017uint32_a"
    "uto_run\030\003 \001(\r\"\330\001\n\013recfg_param\022\024\n\014uint32_"
    "camid\030\001 \001(\r\022\022\n\nuint32_exp\030\002 \001(\r\022\023\n\013uint3"
    "2_gain\030\003 \001(\r\022\024\n\014uint32_speed\030\004 \001(\r\022\024\n\014ui"
    "nt32_rgain\030\005 \001(\r\022\024\n\014uint32_ggain\030\006 \001(\r\022\024"
    "\n\014uint32_bgain\030\007 \001(\r\022\035\n\025uint32_set_if_tr"
    "igger\030\010 \001(\r\022\023\n\013uint32_exp2\030\t \001(\r\"\301\005\n\014cam"
    "_ctrl_msg\022\022\n\nuint32_cmd\030\001 \001(\r\022\037\n\027uint32_"
    "need_img_process\030\002 \001(\r\022\033\n\023uint32_need_st"
    "orage\030\003 \001(\r\022\033\n\023uint32_need_display\030\004 \001(\r"
    "\022\022\n\nuint32_seq\030\005 \001(\r\022\030\n\020uint64_sync_time"
    "\030\006 \001(\004\022\033\n\023uint64_trigger_time\030\007 \001(\004\022\031\n\021u"
    "int64_frame_time\030\010 \001(\004\022\024\n\014uint32_group\030\t"
    " \001(\r\022\033\n\023uint32_trigger_mode\030\n \001(\r\022\032\n\022uin"
    "t32_pysic_camid\030\013 \001(\r\022\033\n\023uint32_running_"
    "mode\030\014 \001(\r\022\035\n\025uint32_need_feed_back\030\r \001("
    "\r\022\031\n\021uint32_product_id\030\016 \001(\r\022\030\n\020uint32_r"
    "eprocess\030\017 \001(\r\022=\n\027msg_change_running_mod"
    "e\030\024 \001(\0132\034.XZProto.change_running_mode\0221\n"
    "\023rpt_msg_recfg_param\030\025 \003(\0132\024.XZProto.rec"
    "fg_param\022\032\n\022uint32_inner_camid\030\026 \001(\r\022\022\n\n"
    "str_serial\030\027 \001(\t\022\022\n\nuint32_pos\030\030 \001(\r\022\030\n\020"
    "debug_file_name1\030  \001(\t\022\030\n\020debug_file_nam"
    "e2\030! \001(\t\022\030\n\020debug_file_name3\030\" \001(\t\022\030\n\020de"
    "bug_file_name4\030# \001(\t\"\273\001\n\nvalue_item\022\020\n\010s"
    "tr_name\030\001 \001(\t\022\022\n\nuint32_idx\030\002 \001(\r\022\026\n\013uin"
    "t32_type\030\003 \001(\r:\0013\022\021\n\tstr_value\030\004 \001(\t\022\024\n\014"
    "uint32_value\030\005 \001(\r\022\024\n\014double_value\030\006 \001(\001"
    "\022\025\n\rrpt_str_value\030\007 \003(\t\022\031\n\021uint32_invisi"
    "bale\030\010 \001(\r\"\226\001\n\ttree_item\022\020\n\010str_name\030\001 \001"
    "(\t\022\027\n\017uint32_bchecked\030\002 \001(\r\022/\n\022rpt_msg_v"
    "alue_item\030\003 \003(\0132\023.XZProto.value_item\022-\n\021"
    "rpt_msg_tree_item\030\004 \003(\0132\022.XZProto.tree_i"
    "tem\"9\n\010tree_cfg\022-\n\021rpt_msg_tree_item\030\001 \003"
    "(\0132\022.XZProto.tree_item\"t\n\007enc_msg\022\023\n\013uin"
    "t32_year\030\001 \001(\r\022\024\n\014bytes_randon\030\002 \001(\014\022\024\n\014"
    "uint32_month\030\003 \001(\r\022\022\n\nuint32_day\030\004 \001(\r\022\024"
    "\n\014bytes_serial\030\005 \001(\014*{\n\010enum_cmd\022\017\n\013CMD_"
    "UNKNOWN\020\000\022\013\n\007CMD_CAP\020\001\022\033\n\027CMD_CHANGE_RUN"
    "NING_MODE\020\002\022\021\n\rCMD_RECFG_CMD\020\003\022\023\n\017CMD_TR"
    "IGGER_CMD\020\004\022\014\n\010CMD_EXIT\020d*^\n\021enum_runnin"
    "g_mode\022\030\n\024RUNNING_MODE_UNKNOWN\020\000\022\027\n\023RUNN"
    "ING_MODE_ONLINE\020\001\022\026\n\022RUNNING_MODE_DEBUG\020"
    "\002*\224\001\n\017enum_value_type\022\026\n\022VALUE_TYPE_UNKN"
    "OWN\020\000\022\022\n\016VALUE_TYPE_INT\020\001\022\024\n\020VALUE_TYPE_"
    "FLOAT\020\002\022\025\n\021VALUE_TYPE_STRING\020\003\022\023\n\017VALUE_"
    "TYPE_LIST\020\004\022\023\n\017VALUE_TYPE_BOOL\020\005", 2032);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocal.proto", &protobuf_RegisterTypes);
  trigger_snapone_info::default_instance_ = new trigger_snapone_info();
  change_running_mode::default_instance_ = new change_running_mode();
  recfg_param::default_instance_ = new recfg_param();
  cam_ctrl_msg::default_instance_ = new cam_ctrl_msg();
  value_item::default_instance_ = new value_item();
  tree_item::default_instance_ = new tree_item();
  tree_cfg::default_instance_ = new tree_cfg();
  enc_msg::default_instance_ = new enc_msg();
  trigger_snapone_info::default_instance_->InitAsDefaultInstance();
  change_running_mode::default_instance_->InitAsDefaultInstance();
  recfg_param::default_instance_->InitAsDefaultInstance();
  cam_ctrl_msg::default_instance_->InitAsDefaultInstance();
  value_item::default_instance_->InitAsDefaultInstance();
  tree_item::default_instance_->InitAsDefaultInstance();
  tree_cfg::default_instance_->InitAsDefaultInstance();
  enc_msg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocal_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocal_2eproto {
  StaticDescriptorInitializer_protocal_2eproto() {
    protobuf_AddDesc_protocal_2eproto();
  }
} static_descriptor_initializer_protocal_2eproto_;

const ::google::protobuf::EnumDescriptor* enum_cmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enum_cmd_descriptor_;
}
bool enum_cmd_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enum_running_mode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enum_running_mode_descriptor_;
}
bool enum_running_mode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enum_value_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enum_value_type_descriptor_;
}
bool enum_value_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int trigger_snapone_info::kUint32GroupFieldNumber;
const int trigger_snapone_info::kUint32SeqFieldNumber;
const int trigger_snapone_info::kUint32IdFieldNumber;
#endif  // !_MSC_VER

trigger_snapone_info::trigger_snapone_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void trigger_snapone_info::InitAsDefaultInstance() {
}

trigger_snapone_info::trigger_snapone_info(const trigger_snapone_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void trigger_snapone_info::SharedCtor() {
  _cached_size_ = 0;
  uint32_group_ = 0u;
  uint32_seq_ = 0u;
  uint32_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

trigger_snapone_info::~trigger_snapone_info() {
  SharedDtor();
}

void trigger_snapone_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void trigger_snapone_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* trigger_snapone_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return trigger_snapone_info_descriptor_;
}

const trigger_snapone_info& trigger_snapone_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocal_2eproto();  return *default_instance_;
}

trigger_snapone_info* trigger_snapone_info::default_instance_ = NULL;

trigger_snapone_info* trigger_snapone_info::New() const {
  return new trigger_snapone_info;
}

void trigger_snapone_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uint32_group_ = 0u;
    uint32_seq_ = 0u;
    uint32_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool trigger_snapone_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uint32_group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_group_)));
          set_has_uint32_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uint32_seq;
        break;
      }
      
      // optional uint32 uint32_seq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_seq_)));
          set_has_uint32_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uint32_id;
        break;
      }
      
      // optional uint32 uint32_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_id_)));
          set_has_uint32_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void trigger_snapone_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uint32_group = 1;
  if (has_uint32_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uint32_group(), output);
  }
  
  // optional uint32 uint32_seq = 2;
  if (has_uint32_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uint32_seq(), output);
  }
  
  // optional uint32 uint32_id = 3;
  if (has_uint32_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uint32_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* trigger_snapone_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uint32_group = 1;
  if (has_uint32_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uint32_group(), target);
  }
  
  // optional uint32 uint32_seq = 2;
  if (has_uint32_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uint32_seq(), target);
  }
  
  // optional uint32 uint32_id = 3;
  if (has_uint32_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uint32_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int trigger_snapone_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uint32_group = 1;
    if (has_uint32_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_group());
    }
    
    // optional uint32 uint32_seq = 2;
    if (has_uint32_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_seq());
    }
    
    // optional uint32 uint32_id = 3;
    if (has_uint32_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void trigger_snapone_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const trigger_snapone_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const trigger_snapone_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void trigger_snapone_info::MergeFrom(const trigger_snapone_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uint32_group()) {
      set_uint32_group(from.uint32_group());
    }
    if (from.has_uint32_seq()) {
      set_uint32_seq(from.uint32_seq());
    }
    if (from.has_uint32_id()) {
      set_uint32_id(from.uint32_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void trigger_snapone_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void trigger_snapone_info::CopyFrom(const trigger_snapone_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool trigger_snapone_info::IsInitialized() const {
  
  return true;
}

void trigger_snapone_info::Swap(trigger_snapone_info* other) {
  if (other != this) {
    std::swap(uint32_group_, other->uint32_group_);
    std::swap(uint32_seq_, other->uint32_seq_);
    std::swap(uint32_id_, other->uint32_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata trigger_snapone_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = trigger_snapone_info_descriptor_;
  metadata.reflection = trigger_snapone_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int change_running_mode::kUint32InputSrcFieldNumber;
const int change_running_mode::kUint32RunningModeFieldNumber;
const int change_running_mode::kUint32AutoRunFieldNumber;
#endif  // !_MSC_VER

change_running_mode::change_running_mode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void change_running_mode::InitAsDefaultInstance() {
}

change_running_mode::change_running_mode(const change_running_mode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void change_running_mode::SharedCtor() {
  _cached_size_ = 0;
  uint32_input_src_ = 0u;
  uint32_running_mode_ = 0u;
  uint32_auto_run_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

change_running_mode::~change_running_mode() {
  SharedDtor();
}

void change_running_mode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void change_running_mode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* change_running_mode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return change_running_mode_descriptor_;
}

const change_running_mode& change_running_mode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocal_2eproto();  return *default_instance_;
}

change_running_mode* change_running_mode::default_instance_ = NULL;

change_running_mode* change_running_mode::New() const {
  return new change_running_mode;
}

void change_running_mode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uint32_input_src_ = 0u;
    uint32_running_mode_ = 0u;
    uint32_auto_run_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool change_running_mode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uint32_input_src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_input_src_)));
          set_has_uint32_input_src();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uint32_running_mode;
        break;
      }
      
      // optional uint32 uint32_running_mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_running_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_running_mode_)));
          set_has_uint32_running_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uint32_auto_run;
        break;
      }
      
      // optional uint32 uint32_auto_run = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_auto_run:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_auto_run_)));
          set_has_uint32_auto_run();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void change_running_mode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uint32_input_src = 1;
  if (has_uint32_input_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uint32_input_src(), output);
  }
  
  // optional uint32 uint32_running_mode = 2;
  if (has_uint32_running_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uint32_running_mode(), output);
  }
  
  // optional uint32 uint32_auto_run = 3;
  if (has_uint32_auto_run()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uint32_auto_run(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* change_running_mode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uint32_input_src = 1;
  if (has_uint32_input_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uint32_input_src(), target);
  }
  
  // optional uint32 uint32_running_mode = 2;
  if (has_uint32_running_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uint32_running_mode(), target);
  }
  
  // optional uint32 uint32_auto_run = 3;
  if (has_uint32_auto_run()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uint32_auto_run(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int change_running_mode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uint32_input_src = 1;
    if (has_uint32_input_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_input_src());
    }
    
    // optional uint32 uint32_running_mode = 2;
    if (has_uint32_running_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_running_mode());
    }
    
    // optional uint32 uint32_auto_run = 3;
    if (has_uint32_auto_run()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_auto_run());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void change_running_mode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const change_running_mode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const change_running_mode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void change_running_mode::MergeFrom(const change_running_mode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uint32_input_src()) {
      set_uint32_input_src(from.uint32_input_src());
    }
    if (from.has_uint32_running_mode()) {
      set_uint32_running_mode(from.uint32_running_mode());
    }
    if (from.has_uint32_auto_run()) {
      set_uint32_auto_run(from.uint32_auto_run());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void change_running_mode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void change_running_mode::CopyFrom(const change_running_mode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool change_running_mode::IsInitialized() const {
  
  return true;
}

void change_running_mode::Swap(change_running_mode* other) {
  if (other != this) {
    std::swap(uint32_input_src_, other->uint32_input_src_);
    std::swap(uint32_running_mode_, other->uint32_running_mode_);
    std::swap(uint32_auto_run_, other->uint32_auto_run_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata change_running_mode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = change_running_mode_descriptor_;
  metadata.reflection = change_running_mode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int recfg_param::kUint32CamidFieldNumber;
const int recfg_param::kUint32ExpFieldNumber;
const int recfg_param::kUint32GainFieldNumber;
const int recfg_param::kUint32SpeedFieldNumber;
const int recfg_param::kUint32RgainFieldNumber;
const int recfg_param::kUint32GgainFieldNumber;
const int recfg_param::kUint32BgainFieldNumber;
const int recfg_param::kUint32SetIfTriggerFieldNumber;
const int recfg_param::kUint32Exp2FieldNumber;
#endif  // !_MSC_VER

recfg_param::recfg_param()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void recfg_param::InitAsDefaultInstance() {
}

recfg_param::recfg_param(const recfg_param& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void recfg_param::SharedCtor() {
  _cached_size_ = 0;
  uint32_camid_ = 0u;
  uint32_exp_ = 0u;
  uint32_gain_ = 0u;
  uint32_speed_ = 0u;
  uint32_rgain_ = 0u;
  uint32_ggain_ = 0u;
  uint32_bgain_ = 0u;
  uint32_set_if_trigger_ = 0u;
  uint32_exp2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

recfg_param::~recfg_param() {
  SharedDtor();
}

void recfg_param::SharedDtor() {
  if (this != default_instance_) {
  }
}

void recfg_param::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* recfg_param::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return recfg_param_descriptor_;
}

const recfg_param& recfg_param::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocal_2eproto();  return *default_instance_;
}

recfg_param* recfg_param::default_instance_ = NULL;

recfg_param* recfg_param::New() const {
  return new recfg_param;
}

void recfg_param::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uint32_camid_ = 0u;
    uint32_exp_ = 0u;
    uint32_gain_ = 0u;
    uint32_speed_ = 0u;
    uint32_rgain_ = 0u;
    uint32_ggain_ = 0u;
    uint32_bgain_ = 0u;
    uint32_set_if_trigger_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    uint32_exp2_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool recfg_param::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uint32_camid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_camid_)));
          set_has_uint32_camid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uint32_exp;
        break;
      }
      
      // optional uint32 uint32_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_exp_)));
          set_has_uint32_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uint32_gain;
        break;
      }
      
      // optional uint32 uint32_gain = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_gain_)));
          set_has_uint32_gain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uint32_speed;
        break;
      }
      
      // optional uint32 uint32_speed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_speed_)));
          set_has_uint32_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uint32_rgain;
        break;
      }
      
      // optional uint32 uint32_rgain = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_rgain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_rgain_)));
          set_has_uint32_rgain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uint32_ggain;
        break;
      }
      
      // optional uint32 uint32_ggain = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_ggain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_ggain_)));
          set_has_uint32_ggain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_uint32_bgain;
        break;
      }
      
      // optional uint32 uint32_bgain = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_bgain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_bgain_)));
          set_has_uint32_bgain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_uint32_set_if_trigger;
        break;
      }
      
      // optional uint32 uint32_set_if_trigger = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_set_if_trigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_set_if_trigger_)));
          set_has_uint32_set_if_trigger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_uint32_exp2;
        break;
      }
      
      // optional uint32 uint32_exp2 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_exp2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_exp2_)));
          set_has_uint32_exp2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void recfg_param::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uint32_camid = 1;
  if (has_uint32_camid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uint32_camid(), output);
  }
  
  // optional uint32 uint32_exp = 2;
  if (has_uint32_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uint32_exp(), output);
  }
  
  // optional uint32 uint32_gain = 3;
  if (has_uint32_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uint32_gain(), output);
  }
  
  // optional uint32 uint32_speed = 4;
  if (has_uint32_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uint32_speed(), output);
  }
  
  // optional uint32 uint32_rgain = 5;
  if (has_uint32_rgain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uint32_rgain(), output);
  }
  
  // optional uint32 uint32_ggain = 6;
  if (has_uint32_ggain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->uint32_ggain(), output);
  }
  
  // optional uint32 uint32_bgain = 7;
  if (has_uint32_bgain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->uint32_bgain(), output);
  }
  
  // optional uint32 uint32_set_if_trigger = 8;
  if (has_uint32_set_if_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->uint32_set_if_trigger(), output);
  }
  
  // optional uint32 uint32_exp2 = 9;
  if (has_uint32_exp2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->uint32_exp2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* recfg_param::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uint32_camid = 1;
  if (has_uint32_camid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uint32_camid(), target);
  }
  
  // optional uint32 uint32_exp = 2;
  if (has_uint32_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uint32_exp(), target);
  }
  
  // optional uint32 uint32_gain = 3;
  if (has_uint32_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uint32_gain(), target);
  }
  
  // optional uint32 uint32_speed = 4;
  if (has_uint32_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uint32_speed(), target);
  }
  
  // optional uint32 uint32_rgain = 5;
  if (has_uint32_rgain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uint32_rgain(), target);
  }
  
  // optional uint32 uint32_ggain = 6;
  if (has_uint32_ggain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->uint32_ggain(), target);
  }
  
  // optional uint32 uint32_bgain = 7;
  if (has_uint32_bgain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->uint32_bgain(), target);
  }
  
  // optional uint32 uint32_set_if_trigger = 8;
  if (has_uint32_set_if_trigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->uint32_set_if_trigger(), target);
  }
  
  // optional uint32 uint32_exp2 = 9;
  if (has_uint32_exp2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->uint32_exp2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int recfg_param::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uint32_camid = 1;
    if (has_uint32_camid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_camid());
    }
    
    // optional uint32 uint32_exp = 2;
    if (has_uint32_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_exp());
    }
    
    // optional uint32 uint32_gain = 3;
    if (has_uint32_gain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_gain());
    }
    
    // optional uint32 uint32_speed = 4;
    if (has_uint32_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_speed());
    }
    
    // optional uint32 uint32_rgain = 5;
    if (has_uint32_rgain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_rgain());
    }
    
    // optional uint32 uint32_ggain = 6;
    if (has_uint32_ggain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_ggain());
    }
    
    // optional uint32 uint32_bgain = 7;
    if (has_uint32_bgain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_bgain());
    }
    
    // optional uint32 uint32_set_if_trigger = 8;
    if (has_uint32_set_if_trigger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_set_if_trigger());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 uint32_exp2 = 9;
    if (has_uint32_exp2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_exp2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void recfg_param::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const recfg_param* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const recfg_param*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void recfg_param::MergeFrom(const recfg_param& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uint32_camid()) {
      set_uint32_camid(from.uint32_camid());
    }
    if (from.has_uint32_exp()) {
      set_uint32_exp(from.uint32_exp());
    }
    if (from.has_uint32_gain()) {
      set_uint32_gain(from.uint32_gain());
    }
    if (from.has_uint32_speed()) {
      set_uint32_speed(from.uint32_speed());
    }
    if (from.has_uint32_rgain()) {
      set_uint32_rgain(from.uint32_rgain());
    }
    if (from.has_uint32_ggain()) {
      set_uint32_ggain(from.uint32_ggain());
    }
    if (from.has_uint32_bgain()) {
      set_uint32_bgain(from.uint32_bgain());
    }
    if (from.has_uint32_set_if_trigger()) {
      set_uint32_set_if_trigger(from.uint32_set_if_trigger());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_uint32_exp2()) {
      set_uint32_exp2(from.uint32_exp2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void recfg_param::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void recfg_param::CopyFrom(const recfg_param& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recfg_param::IsInitialized() const {
  
  return true;
}

void recfg_param::Swap(recfg_param* other) {
  if (other != this) {
    std::swap(uint32_camid_, other->uint32_camid_);
    std::swap(uint32_exp_, other->uint32_exp_);
    std::swap(uint32_gain_, other->uint32_gain_);
    std::swap(uint32_speed_, other->uint32_speed_);
    std::swap(uint32_rgain_, other->uint32_rgain_);
    std::swap(uint32_ggain_, other->uint32_ggain_);
    std::swap(uint32_bgain_, other->uint32_bgain_);
    std::swap(uint32_set_if_trigger_, other->uint32_set_if_trigger_);
    std::swap(uint32_exp2_, other->uint32_exp2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata recfg_param::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = recfg_param_descriptor_;
  metadata.reflection = recfg_param_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cam_ctrl_msg::kUint32CmdFieldNumber;
const int cam_ctrl_msg::kUint32NeedImgProcessFieldNumber;
const int cam_ctrl_msg::kUint32NeedStorageFieldNumber;
const int cam_ctrl_msg::kUint32NeedDisplayFieldNumber;
const int cam_ctrl_msg::kUint32SeqFieldNumber;
const int cam_ctrl_msg::kUint64SyncTimeFieldNumber;
const int cam_ctrl_msg::kUint64TriggerTimeFieldNumber;
const int cam_ctrl_msg::kUint64FrameTimeFieldNumber;
const int cam_ctrl_msg::kUint32GroupFieldNumber;
const int cam_ctrl_msg::kUint32TriggerModeFieldNumber;
const int cam_ctrl_msg::kUint32PysicCamidFieldNumber;
const int cam_ctrl_msg::kUint32RunningModeFieldNumber;
const int cam_ctrl_msg::kUint32NeedFeedBackFieldNumber;
const int cam_ctrl_msg::kUint32ProductIdFieldNumber;
const int cam_ctrl_msg::kUint32ReprocessFieldNumber;
const int cam_ctrl_msg::kMsgChangeRunningModeFieldNumber;
const int cam_ctrl_msg::kRptMsgRecfgParamFieldNumber;
const int cam_ctrl_msg::kUint32InnerCamidFieldNumber;
const int cam_ctrl_msg::kStrSerialFieldNumber;
const int cam_ctrl_msg::kUint32PosFieldNumber;
const int cam_ctrl_msg::kDebugFileName1FieldNumber;
const int cam_ctrl_msg::kDebugFileName2FieldNumber;
const int cam_ctrl_msg::kDebugFileName3FieldNumber;
const int cam_ctrl_msg::kDebugFileName4FieldNumber;
#endif  // !_MSC_VER

cam_ctrl_msg::cam_ctrl_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cam_ctrl_msg::InitAsDefaultInstance() {
  msg_change_running_mode_ = const_cast< ::XZProto::change_running_mode*>(&::XZProto::change_running_mode::default_instance());
}

cam_ctrl_msg::cam_ctrl_msg(const cam_ctrl_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cam_ctrl_msg::SharedCtor() {
  _cached_size_ = 0;
  uint32_cmd_ = 0u;
  uint32_need_img_process_ = 0u;
  uint32_need_storage_ = 0u;
  uint32_need_display_ = 0u;
  uint32_seq_ = 0u;
  uint64_sync_time_ = GOOGLE_ULONGLONG(0);
  uint64_trigger_time_ = GOOGLE_ULONGLONG(0);
  uint64_frame_time_ = GOOGLE_ULONGLONG(0);
  uint32_group_ = 0u;
  uint32_trigger_mode_ = 0u;
  uint32_pysic_camid_ = 0u;
  uint32_running_mode_ = 0u;
  uint32_need_feed_back_ = 0u;
  uint32_product_id_ = 0u;
  uint32_reprocess_ = 0u;
  msg_change_running_mode_ = NULL;
  uint32_inner_camid_ = 0u;
  str_serial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uint32_pos_ = 0u;
  debug_file_name1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  debug_file_name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  debug_file_name3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  debug_file_name4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cam_ctrl_msg::~cam_ctrl_msg() {
  SharedDtor();
}

void cam_ctrl_msg::SharedDtor() {
  if (str_serial_ != &::google::protobuf::internal::kEmptyString) {
    delete str_serial_;
  }
  if (debug_file_name1_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_file_name1_;
  }
  if (debug_file_name2_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_file_name2_;
  }
  if (debug_file_name3_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_file_name3_;
  }
  if (debug_file_name4_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_file_name4_;
  }
  if (this != default_instance_) {
    delete msg_change_running_mode_;
  }
}

void cam_ctrl_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cam_ctrl_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cam_ctrl_msg_descriptor_;
}

const cam_ctrl_msg& cam_ctrl_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocal_2eproto();  return *default_instance_;
}

cam_ctrl_msg* cam_ctrl_msg::default_instance_ = NULL;

cam_ctrl_msg* cam_ctrl_msg::New() const {
  return new cam_ctrl_msg;
}

void cam_ctrl_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uint32_cmd_ = 0u;
    uint32_need_img_process_ = 0u;
    uint32_need_storage_ = 0u;
    uint32_need_display_ = 0u;
    uint32_seq_ = 0u;
    uint64_sync_time_ = GOOGLE_ULONGLONG(0);
    uint64_trigger_time_ = GOOGLE_ULONGLONG(0);
    uint64_frame_time_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    uint32_group_ = 0u;
    uint32_trigger_mode_ = 0u;
    uint32_pysic_camid_ = 0u;
    uint32_running_mode_ = 0u;
    uint32_need_feed_back_ = 0u;
    uint32_product_id_ = 0u;
    uint32_reprocess_ = 0u;
    if (has_msg_change_running_mode()) {
      if (msg_change_running_mode_ != NULL) msg_change_running_mode_->::XZProto::change_running_mode::Clear();
    }
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    uint32_inner_camid_ = 0u;
    if (has_str_serial()) {
      if (str_serial_ != &::google::protobuf::internal::kEmptyString) {
        str_serial_->clear();
      }
    }
    uint32_pos_ = 0u;
    if (has_debug_file_name1()) {
      if (debug_file_name1_ != &::google::protobuf::internal::kEmptyString) {
        debug_file_name1_->clear();
      }
    }
    if (has_debug_file_name2()) {
      if (debug_file_name2_ != &::google::protobuf::internal::kEmptyString) {
        debug_file_name2_->clear();
      }
    }
    if (has_debug_file_name3()) {
      if (debug_file_name3_ != &::google::protobuf::internal::kEmptyString) {
        debug_file_name3_->clear();
      }
    }
    if (has_debug_file_name4()) {
      if (debug_file_name4_ != &::google::protobuf::internal::kEmptyString) {
        debug_file_name4_->clear();
      }
    }
  }
  rpt_msg_recfg_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cam_ctrl_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uint32_cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_cmd_)));
          set_has_uint32_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uint32_need_img_process;
        break;
      }
      
      // optional uint32 uint32_need_img_process = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_need_img_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_need_img_process_)));
          set_has_uint32_need_img_process();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uint32_need_storage;
        break;
      }
      
      // optional uint32 uint32_need_storage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_need_storage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_need_storage_)));
          set_has_uint32_need_storage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uint32_need_display;
        break;
      }
      
      // optional uint32 uint32_need_display = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_need_display:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_need_display_)));
          set_has_uint32_need_display();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uint32_seq;
        break;
      }
      
      // optional uint32 uint32_seq = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_seq_)));
          set_has_uint32_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uint64_sync_time;
        break;
      }
      
      // optional uint64 uint64_sync_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint64_sync_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uint64_sync_time_)));
          set_has_uint64_sync_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_uint64_trigger_time;
        break;
      }
      
      // optional uint64 uint64_trigger_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint64_trigger_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uint64_trigger_time_)));
          set_has_uint64_trigger_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_uint64_frame_time;
        break;
      }
      
      // optional uint64 uint64_frame_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint64_frame_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uint64_frame_time_)));
          set_has_uint64_frame_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_uint32_group;
        break;
      }
      
      // optional uint32 uint32_group = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_group_)));
          set_has_uint32_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_uint32_trigger_mode;
        break;
      }
      
      // optional uint32 uint32_trigger_mode = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_trigger_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_trigger_mode_)));
          set_has_uint32_trigger_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_uint32_pysic_camid;
        break;
      }
      
      // optional uint32 uint32_pysic_camid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_pysic_camid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_pysic_camid_)));
          set_has_uint32_pysic_camid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_uint32_running_mode;
        break;
      }
      
      // optional uint32 uint32_running_mode = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_running_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_running_mode_)));
          set_has_uint32_running_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_uint32_need_feed_back;
        break;
      }
      
      // optional uint32 uint32_need_feed_back = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_need_feed_back:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_need_feed_back_)));
          set_has_uint32_need_feed_back();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_uint32_product_id;
        break;
      }
      
      // optional uint32 uint32_product_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_product_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_product_id_)));
          set_has_uint32_product_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_uint32_reprocess;
        break;
      }
      
      // optional uint32 uint32_reprocess = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_reprocess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_reprocess_)));
          set_has_uint32_reprocess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_msg_change_running_mode;
        break;
      }
      
      // optional .XZProto.change_running_mode msg_change_running_mode = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_change_running_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_change_running_mode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_rpt_msg_recfg_param;
        break;
      }
      
      // repeated .XZProto.recfg_param rpt_msg_recfg_param = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rpt_msg_recfg_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rpt_msg_recfg_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_rpt_msg_recfg_param;
        if (input->ExpectTag(176)) goto parse_uint32_inner_camid;
        break;
      }
      
      // optional uint32 uint32_inner_camid = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_inner_camid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_inner_camid_)));
          set_has_uint32_inner_camid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_str_serial;
        break;
      }
      
      // optional string str_serial = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_serial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_serial()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_serial().data(), this->str_serial().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_uint32_pos;
        break;
      }
      
      // optional uint32 uint32_pos = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_pos_)));
          set_has_uint32_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_debug_file_name1;
        break;
      }
      
      // optional string debug_file_name1 = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_file_name1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_file_name1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug_file_name1().data(), this->debug_file_name1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_debug_file_name2;
        break;
      }
      
      // optional string debug_file_name2 = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_file_name2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_file_name2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug_file_name2().data(), this->debug_file_name2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_debug_file_name3;
        break;
      }
      
      // optional string debug_file_name3 = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_file_name3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_file_name3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug_file_name3().data(), this->debug_file_name3().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_debug_file_name4;
        break;
      }
      
      // optional string debug_file_name4 = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_file_name4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_file_name4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug_file_name4().data(), this->debug_file_name4().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cam_ctrl_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uint32_cmd = 1;
  if (has_uint32_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uint32_cmd(), output);
  }
  
  // optional uint32 uint32_need_img_process = 2;
  if (has_uint32_need_img_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uint32_need_img_process(), output);
  }
  
  // optional uint32 uint32_need_storage = 3;
  if (has_uint32_need_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uint32_need_storage(), output);
  }
  
  // optional uint32 uint32_need_display = 4;
  if (has_uint32_need_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uint32_need_display(), output);
  }
  
  // optional uint32 uint32_seq = 5;
  if (has_uint32_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uint32_seq(), output);
  }
  
  // optional uint64 uint64_sync_time = 6;
  if (has_uint64_sync_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->uint64_sync_time(), output);
  }
  
  // optional uint64 uint64_trigger_time = 7;
  if (has_uint64_trigger_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->uint64_trigger_time(), output);
  }
  
  // optional uint64 uint64_frame_time = 8;
  if (has_uint64_frame_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->uint64_frame_time(), output);
  }
  
  // optional uint32 uint32_group = 9;
  if (has_uint32_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->uint32_group(), output);
  }
  
  // optional uint32 uint32_trigger_mode = 10;
  if (has_uint32_trigger_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->uint32_trigger_mode(), output);
  }
  
  // optional uint32 uint32_pysic_camid = 11;
  if (has_uint32_pysic_camid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->uint32_pysic_camid(), output);
  }
  
  // optional uint32 uint32_running_mode = 12;
  if (has_uint32_running_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->uint32_running_mode(), output);
  }
  
  // optional uint32 uint32_need_feed_back = 13;
  if (has_uint32_need_feed_back()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->uint32_need_feed_back(), output);
  }
  
  // optional uint32 uint32_product_id = 14;
  if (has_uint32_product_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->uint32_product_id(), output);
  }
  
  // optional uint32 uint32_reprocess = 15;
  if (has_uint32_reprocess()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->uint32_reprocess(), output);
  }
  
  // optional .XZProto.change_running_mode msg_change_running_mode = 20;
  if (has_msg_change_running_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->msg_change_running_mode(), output);
  }
  
  // repeated .XZProto.recfg_param rpt_msg_recfg_param = 21;
  for (int i = 0; i < this->rpt_msg_recfg_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->rpt_msg_recfg_param(i), output);
  }
  
  // optional uint32 uint32_inner_camid = 22;
  if (has_uint32_inner_camid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->uint32_inner_camid(), output);
  }
  
  // optional string str_serial = 23;
  if (has_str_serial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_serial().data(), this->str_serial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->str_serial(), output);
  }
  
  // optional uint32 uint32_pos = 24;
  if (has_uint32_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->uint32_pos(), output);
  }
  
  // optional string debug_file_name1 = 32;
  if (has_debug_file_name1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_file_name1().data(), this->debug_file_name1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->debug_file_name1(), output);
  }
  
  // optional string debug_file_name2 = 33;
  if (has_debug_file_name2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_file_name2().data(), this->debug_file_name2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->debug_file_name2(), output);
  }
  
  // optional string debug_file_name3 = 34;
  if (has_debug_file_name3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_file_name3().data(), this->debug_file_name3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->debug_file_name3(), output);
  }
  
  // optional string debug_file_name4 = 35;
  if (has_debug_file_name4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_file_name4().data(), this->debug_file_name4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      35, this->debug_file_name4(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cam_ctrl_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uint32_cmd = 1;
  if (has_uint32_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uint32_cmd(), target);
  }
  
  // optional uint32 uint32_need_img_process = 2;
  if (has_uint32_need_img_process()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uint32_need_img_process(), target);
  }
  
  // optional uint32 uint32_need_storage = 3;
  if (has_uint32_need_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uint32_need_storage(), target);
  }
  
  // optional uint32 uint32_need_display = 4;
  if (has_uint32_need_display()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uint32_need_display(), target);
  }
  
  // optional uint32 uint32_seq = 5;
  if (has_uint32_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uint32_seq(), target);
  }
  
  // optional uint64 uint64_sync_time = 6;
  if (has_uint64_sync_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->uint64_sync_time(), target);
  }
  
  // optional uint64 uint64_trigger_time = 7;
  if (has_uint64_trigger_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->uint64_trigger_time(), target);
  }
  
  // optional uint64 uint64_frame_time = 8;
  if (has_uint64_frame_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->uint64_frame_time(), target);
  }
  
  // optional uint32 uint32_group = 9;
  if (has_uint32_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->uint32_group(), target);
  }
  
  // optional uint32 uint32_trigger_mode = 10;
  if (has_uint32_trigger_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->uint32_trigger_mode(), target);
  }
  
  // optional uint32 uint32_pysic_camid = 11;
  if (has_uint32_pysic_camid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->uint32_pysic_camid(), target);
  }
  
  // optional uint32 uint32_running_mode = 12;
  if (has_uint32_running_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->uint32_running_mode(), target);
  }
  
  // optional uint32 uint32_need_feed_back = 13;
  if (has_uint32_need_feed_back()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->uint32_need_feed_back(), target);
  }
  
  // optional uint32 uint32_product_id = 14;
  if (has_uint32_product_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->uint32_product_id(), target);
  }
  
  // optional uint32 uint32_reprocess = 15;
  if (has_uint32_reprocess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->uint32_reprocess(), target);
  }
  
  // optional .XZProto.change_running_mode msg_change_running_mode = 20;
  if (has_msg_change_running_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->msg_change_running_mode(), target);
  }
  
  // repeated .XZProto.recfg_param rpt_msg_recfg_param = 21;
  for (int i = 0; i < this->rpt_msg_recfg_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->rpt_msg_recfg_param(i), target);
  }
  
  // optional uint32 uint32_inner_camid = 22;
  if (has_uint32_inner_camid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->uint32_inner_camid(), target);
  }
  
  // optional string str_serial = 23;
  if (has_str_serial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_serial().data(), this->str_serial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->str_serial(), target);
  }
  
  // optional uint32 uint32_pos = 24;
  if (has_uint32_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->uint32_pos(), target);
  }
  
  // optional string debug_file_name1 = 32;
  if (has_debug_file_name1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_file_name1().data(), this->debug_file_name1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->debug_file_name1(), target);
  }
  
  // optional string debug_file_name2 = 33;
  if (has_debug_file_name2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_file_name2().data(), this->debug_file_name2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->debug_file_name2(), target);
  }
  
  // optional string debug_file_name3 = 34;
  if (has_debug_file_name3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_file_name3().data(), this->debug_file_name3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->debug_file_name3(), target);
  }
  
  // optional string debug_file_name4 = 35;
  if (has_debug_file_name4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_file_name4().data(), this->debug_file_name4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->debug_file_name4(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cam_ctrl_msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uint32_cmd = 1;
    if (has_uint32_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_cmd());
    }
    
    // optional uint32 uint32_need_img_process = 2;
    if (has_uint32_need_img_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_need_img_process());
    }
    
    // optional uint32 uint32_need_storage = 3;
    if (has_uint32_need_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_need_storage());
    }
    
    // optional uint32 uint32_need_display = 4;
    if (has_uint32_need_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_need_display());
    }
    
    // optional uint32 uint32_seq = 5;
    if (has_uint32_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_seq());
    }
    
    // optional uint64 uint64_sync_time = 6;
    if (has_uint64_sync_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uint64_sync_time());
    }
    
    // optional uint64 uint64_trigger_time = 7;
    if (has_uint64_trigger_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uint64_trigger_time());
    }
    
    // optional uint64 uint64_frame_time = 8;
    if (has_uint64_frame_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uint64_frame_time());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 uint32_group = 9;
    if (has_uint32_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_group());
    }
    
    // optional uint32 uint32_trigger_mode = 10;
    if (has_uint32_trigger_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_trigger_mode());
    }
    
    // optional uint32 uint32_pysic_camid = 11;
    if (has_uint32_pysic_camid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_pysic_camid());
    }
    
    // optional uint32 uint32_running_mode = 12;
    if (has_uint32_running_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_running_mode());
    }
    
    // optional uint32 uint32_need_feed_back = 13;
    if (has_uint32_need_feed_back()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_need_feed_back());
    }
    
    // optional uint32 uint32_product_id = 14;
    if (has_uint32_product_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_product_id());
    }
    
    // optional uint32 uint32_reprocess = 15;
    if (has_uint32_reprocess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_reprocess());
    }
    
    // optional .XZProto.change_running_mode msg_change_running_mode = 20;
    if (has_msg_change_running_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_change_running_mode());
    }
    
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional uint32 uint32_inner_camid = 22;
    if (has_uint32_inner_camid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_inner_camid());
    }
    
    // optional string str_serial = 23;
    if (has_str_serial()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_serial());
    }
    
    // optional uint32 uint32_pos = 24;
    if (has_uint32_pos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_pos());
    }
    
    // optional string debug_file_name1 = 32;
    if (has_debug_file_name1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_file_name1());
    }
    
    // optional string debug_file_name2 = 33;
    if (has_debug_file_name2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_file_name2());
    }
    
    // optional string debug_file_name3 = 34;
    if (has_debug_file_name3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_file_name3());
    }
    
    // optional string debug_file_name4 = 35;
    if (has_debug_file_name4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_file_name4());
    }
    
  }
  // repeated .XZProto.recfg_param rpt_msg_recfg_param = 21;
  total_size += 2 * this->rpt_msg_recfg_param_size();
  for (int i = 0; i < this->rpt_msg_recfg_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rpt_msg_recfg_param(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cam_ctrl_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cam_ctrl_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cam_ctrl_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cam_ctrl_msg::MergeFrom(const cam_ctrl_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  rpt_msg_recfg_param_.MergeFrom(from.rpt_msg_recfg_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uint32_cmd()) {
      set_uint32_cmd(from.uint32_cmd());
    }
    if (from.has_uint32_need_img_process()) {
      set_uint32_need_img_process(from.uint32_need_img_process());
    }
    if (from.has_uint32_need_storage()) {
      set_uint32_need_storage(from.uint32_need_storage());
    }
    if (from.has_uint32_need_display()) {
      set_uint32_need_display(from.uint32_need_display());
    }
    if (from.has_uint32_seq()) {
      set_uint32_seq(from.uint32_seq());
    }
    if (from.has_uint64_sync_time()) {
      set_uint64_sync_time(from.uint64_sync_time());
    }
    if (from.has_uint64_trigger_time()) {
      set_uint64_trigger_time(from.uint64_trigger_time());
    }
    if (from.has_uint64_frame_time()) {
      set_uint64_frame_time(from.uint64_frame_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_uint32_group()) {
      set_uint32_group(from.uint32_group());
    }
    if (from.has_uint32_trigger_mode()) {
      set_uint32_trigger_mode(from.uint32_trigger_mode());
    }
    if (from.has_uint32_pysic_camid()) {
      set_uint32_pysic_camid(from.uint32_pysic_camid());
    }
    if (from.has_uint32_running_mode()) {
      set_uint32_running_mode(from.uint32_running_mode());
    }
    if (from.has_uint32_need_feed_back()) {
      set_uint32_need_feed_back(from.uint32_need_feed_back());
    }
    if (from.has_uint32_product_id()) {
      set_uint32_product_id(from.uint32_product_id());
    }
    if (from.has_uint32_reprocess()) {
      set_uint32_reprocess(from.uint32_reprocess());
    }
    if (from.has_msg_change_running_mode()) {
      mutable_msg_change_running_mode()->::XZProto::change_running_mode::MergeFrom(from.msg_change_running_mode());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_uint32_inner_camid()) {
      set_uint32_inner_camid(from.uint32_inner_camid());
    }
    if (from.has_str_serial()) {
      set_str_serial(from.str_serial());
    }
    if (from.has_uint32_pos()) {
      set_uint32_pos(from.uint32_pos());
    }
    if (from.has_debug_file_name1()) {
      set_debug_file_name1(from.debug_file_name1());
    }
    if (from.has_debug_file_name2()) {
      set_debug_file_name2(from.debug_file_name2());
    }
    if (from.has_debug_file_name3()) {
      set_debug_file_name3(from.debug_file_name3());
    }
    if (from.has_debug_file_name4()) {
      set_debug_file_name4(from.debug_file_name4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cam_ctrl_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cam_ctrl_msg::CopyFrom(const cam_ctrl_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cam_ctrl_msg::IsInitialized() const {
  
  return true;
}

void cam_ctrl_msg::Swap(cam_ctrl_msg* other) {
  if (other != this) {
    std::swap(uint32_cmd_, other->uint32_cmd_);
    std::swap(uint32_need_img_process_, other->uint32_need_img_process_);
    std::swap(uint32_need_storage_, other->uint32_need_storage_);
    std::swap(uint32_need_display_, other->uint32_need_display_);
    std::swap(uint32_seq_, other->uint32_seq_);
    std::swap(uint64_sync_time_, other->uint64_sync_time_);
    std::swap(uint64_trigger_time_, other->uint64_trigger_time_);
    std::swap(uint64_frame_time_, other->uint64_frame_time_);
    std::swap(uint32_group_, other->uint32_group_);
    std::swap(uint32_trigger_mode_, other->uint32_trigger_mode_);
    std::swap(uint32_pysic_camid_, other->uint32_pysic_camid_);
    std::swap(uint32_running_mode_, other->uint32_running_mode_);
    std::swap(uint32_need_feed_back_, other->uint32_need_feed_back_);
    std::swap(uint32_product_id_, other->uint32_product_id_);
    std::swap(uint32_reprocess_, other->uint32_reprocess_);
    std::swap(msg_change_running_mode_, other->msg_change_running_mode_);
    rpt_msg_recfg_param_.Swap(&other->rpt_msg_recfg_param_);
    std::swap(uint32_inner_camid_, other->uint32_inner_camid_);
    std::swap(str_serial_, other->str_serial_);
    std::swap(uint32_pos_, other->uint32_pos_);
    std::swap(debug_file_name1_, other->debug_file_name1_);
    std::swap(debug_file_name2_, other->debug_file_name2_);
    std::swap(debug_file_name3_, other->debug_file_name3_);
    std::swap(debug_file_name4_, other->debug_file_name4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cam_ctrl_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cam_ctrl_msg_descriptor_;
  metadata.reflection = cam_ctrl_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int value_item::kStrNameFieldNumber;
const int value_item::kUint32IdxFieldNumber;
const int value_item::kUint32TypeFieldNumber;
const int value_item::kStrValueFieldNumber;
const int value_item::kUint32ValueFieldNumber;
const int value_item::kDoubleValueFieldNumber;
const int value_item::kRptStrValueFieldNumber;
const int value_item::kUint32InvisibaleFieldNumber;
#endif  // !_MSC_VER

value_item::value_item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void value_item::InitAsDefaultInstance() {
}

value_item::value_item(const value_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void value_item::SharedCtor() {
  _cached_size_ = 0;
  str_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uint32_idx_ = 0u;
  uint32_type_ = 3u;
  str_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uint32_value_ = 0u;
  double_value_ = 0;
  uint32_invisibale_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

value_item::~value_item() {
  SharedDtor();
}

void value_item::SharedDtor() {
  if (str_name_ != &::google::protobuf::internal::kEmptyString) {
    delete str_name_;
  }
  if (str_value_ != &::google::protobuf::internal::kEmptyString) {
    delete str_value_;
  }
  if (this != default_instance_) {
  }
}

void value_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* value_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return value_item_descriptor_;
}

const value_item& value_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocal_2eproto();  return *default_instance_;
}

value_item* value_item::default_instance_ = NULL;

value_item* value_item::New() const {
  return new value_item;
}

void value_item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str_name()) {
      if (str_name_ != &::google::protobuf::internal::kEmptyString) {
        str_name_->clear();
      }
    }
    uint32_idx_ = 0u;
    uint32_type_ = 3u;
    if (has_str_value()) {
      if (str_value_ != &::google::protobuf::internal::kEmptyString) {
        str_value_->clear();
      }
    }
    uint32_value_ = 0u;
    double_value_ = 0;
    uint32_invisibale_ = 0u;
  }
  rpt_str_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool value_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string str_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_name().data(), this->str_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uint32_idx;
        break;
      }
      
      // optional uint32 uint32_idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_idx_)));
          set_has_uint32_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uint32_type;
        break;
      }
      
      // optional uint32 uint32_type = 3 [default = 3];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_type_)));
          set_has_uint32_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_str_value;
        break;
      }
      
      // optional string str_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_value().data(), this->str_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uint32_value;
        break;
      }
      
      // optional uint32 uint32_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_value_)));
          set_has_uint32_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_double_value;
        break;
      }
      
      // optional double double_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_double_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_value_)));
          set_has_double_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rpt_str_value;
        break;
      }
      
      // repeated string rpt_str_value = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rpt_str_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_rpt_str_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rpt_str_value(0).data(), this->rpt_str_value(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rpt_str_value;
        if (input->ExpectTag(64)) goto parse_uint32_invisibale;
        break;
      }
      
      // optional uint32 uint32_invisibale = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_invisibale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_invisibale_)));
          set_has_uint32_invisibale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void value_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string str_name = 1;
  if (has_str_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_name().data(), this->str_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str_name(), output);
  }
  
  // optional uint32 uint32_idx = 2;
  if (has_uint32_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uint32_idx(), output);
  }
  
  // optional uint32 uint32_type = 3 [default = 3];
  if (has_uint32_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uint32_type(), output);
  }
  
  // optional string str_value = 4;
  if (has_str_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_value().data(), this->str_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->str_value(), output);
  }
  
  // optional uint32 uint32_value = 5;
  if (has_uint32_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uint32_value(), output);
  }
  
  // optional double double_value = 6;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->double_value(), output);
  }
  
  // repeated string rpt_str_value = 7;
  for (int i = 0; i < this->rpt_str_value_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->rpt_str_value(i).data(), this->rpt_str_value(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->rpt_str_value(i), output);
  }
  
  // optional uint32 uint32_invisibale = 8;
  if (has_uint32_invisibale()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->uint32_invisibale(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* value_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string str_name = 1;
  if (has_str_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_name().data(), this->str_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str_name(), target);
  }
  
  // optional uint32 uint32_idx = 2;
  if (has_uint32_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uint32_idx(), target);
  }
  
  // optional uint32 uint32_type = 3 [default = 3];
  if (has_uint32_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uint32_type(), target);
  }
  
  // optional string str_value = 4;
  if (has_str_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_value().data(), this->str_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->str_value(), target);
  }
  
  // optional uint32 uint32_value = 5;
  if (has_uint32_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uint32_value(), target);
  }
  
  // optional double double_value = 6;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->double_value(), target);
  }
  
  // repeated string rpt_str_value = 7;
  for (int i = 0; i < this->rpt_str_value_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rpt_str_value(i).data(), this->rpt_str_value(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->rpt_str_value(i), target);
  }
  
  // optional uint32 uint32_invisibale = 8;
  if (has_uint32_invisibale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->uint32_invisibale(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int value_item::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string str_name = 1;
    if (has_str_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_name());
    }
    
    // optional uint32 uint32_idx = 2;
    if (has_uint32_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_idx());
    }
    
    // optional uint32 uint32_type = 3 [default = 3];
    if (has_uint32_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_type());
    }
    
    // optional string str_value = 4;
    if (has_str_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_value());
    }
    
    // optional uint32 uint32_value = 5;
    if (has_uint32_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_value());
    }
    
    // optional double double_value = 6;
    if (has_double_value()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 uint32_invisibale = 8;
    if (has_uint32_invisibale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_invisibale());
    }
    
  }
  // repeated string rpt_str_value = 7;
  total_size += 1 * this->rpt_str_value_size();
  for (int i = 0; i < this->rpt_str_value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->rpt_str_value(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void value_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const value_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const value_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void value_item::MergeFrom(const value_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  rpt_str_value_.MergeFrom(from.rpt_str_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str_name()) {
      set_str_name(from.str_name());
    }
    if (from.has_uint32_idx()) {
      set_uint32_idx(from.uint32_idx());
    }
    if (from.has_uint32_type()) {
      set_uint32_type(from.uint32_type());
    }
    if (from.has_str_value()) {
      set_str_value(from.str_value());
    }
    if (from.has_uint32_value()) {
      set_uint32_value(from.uint32_value());
    }
    if (from.has_double_value()) {
      set_double_value(from.double_value());
    }
    if (from.has_uint32_invisibale()) {
      set_uint32_invisibale(from.uint32_invisibale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void value_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void value_item::CopyFrom(const value_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool value_item::IsInitialized() const {
  
  return true;
}

void value_item::Swap(value_item* other) {
  if (other != this) {
    std::swap(str_name_, other->str_name_);
    std::swap(uint32_idx_, other->uint32_idx_);
    std::swap(uint32_type_, other->uint32_type_);
    std::swap(str_value_, other->str_value_);
    std::swap(uint32_value_, other->uint32_value_);
    std::swap(double_value_, other->double_value_);
    rpt_str_value_.Swap(&other->rpt_str_value_);
    std::swap(uint32_invisibale_, other->uint32_invisibale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata value_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = value_item_descriptor_;
  metadata.reflection = value_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tree_item::kStrNameFieldNumber;
const int tree_item::kUint32BcheckedFieldNumber;
const int tree_item::kRptMsgValueItemFieldNumber;
const int tree_item::kRptMsgTreeItemFieldNumber;
#endif  // !_MSC_VER

tree_item::tree_item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tree_item::InitAsDefaultInstance() {
}

tree_item::tree_item(const tree_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tree_item::SharedCtor() {
  _cached_size_ = 0;
  str_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uint32_bchecked_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tree_item::~tree_item() {
  SharedDtor();
}

void tree_item::SharedDtor() {
  if (str_name_ != &::google::protobuf::internal::kEmptyString) {
    delete str_name_;
  }
  if (this != default_instance_) {
  }
}

void tree_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tree_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tree_item_descriptor_;
}

const tree_item& tree_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocal_2eproto();  return *default_instance_;
}

tree_item* tree_item::default_instance_ = NULL;

tree_item* tree_item::New() const {
  return new tree_item;
}

void tree_item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str_name()) {
      if (str_name_ != &::google::protobuf::internal::kEmptyString) {
        str_name_->clear();
      }
    }
    uint32_bchecked_ = 0u;
  }
  rpt_msg_value_item_.Clear();
  rpt_msg_tree_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tree_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string str_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_name().data(), this->str_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uint32_bchecked;
        break;
      }
      
      // optional uint32 uint32_bchecked = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_bchecked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_bchecked_)));
          set_has_uint32_bchecked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rpt_msg_value_item;
        break;
      }
      
      // repeated .XZProto.value_item rpt_msg_value_item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rpt_msg_value_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rpt_msg_value_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rpt_msg_value_item;
        if (input->ExpectTag(34)) goto parse_rpt_msg_tree_item;
        break;
      }
      
      // repeated .XZProto.tree_item rpt_msg_tree_item = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rpt_msg_tree_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rpt_msg_tree_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rpt_msg_tree_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tree_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string str_name = 1;
  if (has_str_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_name().data(), this->str_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str_name(), output);
  }
  
  // optional uint32 uint32_bchecked = 2;
  if (has_uint32_bchecked()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uint32_bchecked(), output);
  }
  
  // repeated .XZProto.value_item rpt_msg_value_item = 3;
  for (int i = 0; i < this->rpt_msg_value_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rpt_msg_value_item(i), output);
  }
  
  // repeated .XZProto.tree_item rpt_msg_tree_item = 4;
  for (int i = 0; i < this->rpt_msg_tree_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rpt_msg_tree_item(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tree_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string str_name = 1;
  if (has_str_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_name().data(), this->str_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str_name(), target);
  }
  
  // optional uint32 uint32_bchecked = 2;
  if (has_uint32_bchecked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uint32_bchecked(), target);
  }
  
  // repeated .XZProto.value_item rpt_msg_value_item = 3;
  for (int i = 0; i < this->rpt_msg_value_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rpt_msg_value_item(i), target);
  }
  
  // repeated .XZProto.tree_item rpt_msg_tree_item = 4;
  for (int i = 0; i < this->rpt_msg_tree_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rpt_msg_tree_item(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tree_item::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string str_name = 1;
    if (has_str_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_name());
    }
    
    // optional uint32 uint32_bchecked = 2;
    if (has_uint32_bchecked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_bchecked());
    }
    
  }
  // repeated .XZProto.value_item rpt_msg_value_item = 3;
  total_size += 1 * this->rpt_msg_value_item_size();
  for (int i = 0; i < this->rpt_msg_value_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rpt_msg_value_item(i));
  }
  
  // repeated .XZProto.tree_item rpt_msg_tree_item = 4;
  total_size += 1 * this->rpt_msg_tree_item_size();
  for (int i = 0; i < this->rpt_msg_tree_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rpt_msg_tree_item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tree_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tree_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tree_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tree_item::MergeFrom(const tree_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  rpt_msg_value_item_.MergeFrom(from.rpt_msg_value_item_);
  rpt_msg_tree_item_.MergeFrom(from.rpt_msg_tree_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str_name()) {
      set_str_name(from.str_name());
    }
    if (from.has_uint32_bchecked()) {
      set_uint32_bchecked(from.uint32_bchecked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tree_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tree_item::CopyFrom(const tree_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tree_item::IsInitialized() const {
  
  return true;
}

void tree_item::Swap(tree_item* other) {
  if (other != this) {
    std::swap(str_name_, other->str_name_);
    std::swap(uint32_bchecked_, other->uint32_bchecked_);
    rpt_msg_value_item_.Swap(&other->rpt_msg_value_item_);
    rpt_msg_tree_item_.Swap(&other->rpt_msg_tree_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tree_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tree_item_descriptor_;
  metadata.reflection = tree_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tree_cfg::kRptMsgTreeItemFieldNumber;
#endif  // !_MSC_VER

tree_cfg::tree_cfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tree_cfg::InitAsDefaultInstance() {
}

tree_cfg::tree_cfg(const tree_cfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tree_cfg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tree_cfg::~tree_cfg() {
  SharedDtor();
}

void tree_cfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tree_cfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tree_cfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tree_cfg_descriptor_;
}

const tree_cfg& tree_cfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocal_2eproto();  return *default_instance_;
}

tree_cfg* tree_cfg::default_instance_ = NULL;

tree_cfg* tree_cfg::New() const {
  return new tree_cfg;
}

void tree_cfg::Clear() {
  rpt_msg_tree_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tree_cfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .XZProto.tree_item rpt_msg_tree_item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rpt_msg_tree_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rpt_msg_tree_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rpt_msg_tree_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tree_cfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .XZProto.tree_item rpt_msg_tree_item = 1;
  for (int i = 0; i < this->rpt_msg_tree_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rpt_msg_tree_item(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tree_cfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .XZProto.tree_item rpt_msg_tree_item = 1;
  for (int i = 0; i < this->rpt_msg_tree_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rpt_msg_tree_item(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tree_cfg::ByteSize() const {
  int total_size = 0;
  
  // repeated .XZProto.tree_item rpt_msg_tree_item = 1;
  total_size += 1 * this->rpt_msg_tree_item_size();
  for (int i = 0; i < this->rpt_msg_tree_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rpt_msg_tree_item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tree_cfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tree_cfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tree_cfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tree_cfg::MergeFrom(const tree_cfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  rpt_msg_tree_item_.MergeFrom(from.rpt_msg_tree_item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tree_cfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tree_cfg::CopyFrom(const tree_cfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tree_cfg::IsInitialized() const {
  
  return true;
}

void tree_cfg::Swap(tree_cfg* other) {
  if (other != this) {
    rpt_msg_tree_item_.Swap(&other->rpt_msg_tree_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tree_cfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tree_cfg_descriptor_;
  metadata.reflection = tree_cfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int enc_msg::kUint32YearFieldNumber;
const int enc_msg::kBytesRandonFieldNumber;
const int enc_msg::kUint32MonthFieldNumber;
const int enc_msg::kUint32DayFieldNumber;
const int enc_msg::kBytesSerialFieldNumber;
#endif  // !_MSC_VER

enc_msg::enc_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void enc_msg::InitAsDefaultInstance() {
}

enc_msg::enc_msg(const enc_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void enc_msg::SharedCtor() {
  _cached_size_ = 0;
  uint32_year_ = 0u;
  bytes_randon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uint32_month_ = 0u;
  uint32_day_ = 0u;
  bytes_serial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enc_msg::~enc_msg() {
  SharedDtor();
}

void enc_msg::SharedDtor() {
  if (bytes_randon_ != &::google::protobuf::internal::kEmptyString) {
    delete bytes_randon_;
  }
  if (bytes_serial_ != &::google::protobuf::internal::kEmptyString) {
    delete bytes_serial_;
  }
  if (this != default_instance_) {
  }
}

void enc_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enc_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enc_msg_descriptor_;
}

const enc_msg& enc_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocal_2eproto();  return *default_instance_;
}

enc_msg* enc_msg::default_instance_ = NULL;

enc_msg* enc_msg::New() const {
  return new enc_msg;
}

void enc_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uint32_year_ = 0u;
    if (has_bytes_randon()) {
      if (bytes_randon_ != &::google::protobuf::internal::kEmptyString) {
        bytes_randon_->clear();
      }
    }
    uint32_month_ = 0u;
    uint32_day_ = 0u;
    if (has_bytes_serial()) {
      if (bytes_serial_ != &::google::protobuf::internal::kEmptyString) {
        bytes_serial_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool enc_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uint32_year = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_year_)));
          set_has_uint32_year();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bytes_randon;
        break;
      }
      
      // optional bytes bytes_randon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bytes_randon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes_randon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uint32_month;
        break;
      }
      
      // optional uint32 uint32_month = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_month_)));
          set_has_uint32_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uint32_day;
        break;
      }
      
      // optional uint32 uint32_day = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_day_)));
          set_has_uint32_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bytes_serial;
        break;
      }
      
      // optional bytes bytes_serial = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bytes_serial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes_serial()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void enc_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uint32_year = 1;
  if (has_uint32_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uint32_year(), output);
  }
  
  // optional bytes bytes_randon = 2;
  if (has_bytes_randon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->bytes_randon(), output);
  }
  
  // optional uint32 uint32_month = 3;
  if (has_uint32_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uint32_month(), output);
  }
  
  // optional uint32 uint32_day = 4;
  if (has_uint32_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uint32_day(), output);
  }
  
  // optional bytes bytes_serial = 5;
  if (has_bytes_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->bytes_serial(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enc_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uint32_year = 1;
  if (has_uint32_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uint32_year(), target);
  }
  
  // optional bytes bytes_randon = 2;
  if (has_bytes_randon()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->bytes_randon(), target);
  }
  
  // optional uint32 uint32_month = 3;
  if (has_uint32_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uint32_month(), target);
  }
  
  // optional uint32 uint32_day = 4;
  if (has_uint32_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uint32_day(), target);
  }
  
  // optional bytes bytes_serial = 5;
  if (has_bytes_serial()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->bytes_serial(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int enc_msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uint32_year = 1;
    if (has_uint32_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_year());
    }
    
    // optional bytes bytes_randon = 2;
    if (has_bytes_randon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytes_randon());
    }
    
    // optional uint32 uint32_month = 3;
    if (has_uint32_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_month());
    }
    
    // optional uint32 uint32_day = 4;
    if (has_uint32_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_day());
    }
    
    // optional bytes bytes_serial = 5;
    if (has_bytes_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytes_serial());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enc_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const enc_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enc_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enc_msg::MergeFrom(const enc_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uint32_year()) {
      set_uint32_year(from.uint32_year());
    }
    if (from.has_bytes_randon()) {
      set_bytes_randon(from.bytes_randon());
    }
    if (from.has_uint32_month()) {
      set_uint32_month(from.uint32_month());
    }
    if (from.has_uint32_day()) {
      set_uint32_day(from.uint32_day());
    }
    if (from.has_bytes_serial()) {
      set_bytes_serial(from.bytes_serial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void enc_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enc_msg::CopyFrom(const enc_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enc_msg::IsInitialized() const {
  
  return true;
}

void enc_msg::Swap(enc_msg* other) {
  if (other != this) {
    std::swap(uint32_year_, other->uint32_year_);
    std::swap(bytes_randon_, other->bytes_randon_);
    std::swap(uint32_month_, other->uint32_month_);
    std::swap(uint32_day_, other->uint32_day_);
    std::swap(bytes_serial_, other->bytes_serial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata enc_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enc_msg_descriptor_;
  metadata.reflection = enc_msg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace XZProto

// @@protoc_insertion_point(global_scope)
