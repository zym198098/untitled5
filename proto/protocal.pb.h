// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocal.proto

#ifndef PROTOBUF_protocal_2eproto__INCLUDED
#define PROTOBUF_protocal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace XZProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protocal_2eproto();
void protobuf_AssignDesc_protocal_2eproto();
void protobuf_ShutdownFile_protocal_2eproto();

class trigger_snapone_info;
class change_running_mode;
class recfg_param;
class cam_ctrl_msg;
class value_item;
class tree_item;
class tree_cfg;
class enc_msg;

enum enum_cmd {
  CMD_UNKNOWN = 0,
  CMD_CAP = 1,
  CMD_CHANGE_RUNNING_MODE = 2,
  CMD_RECFG_CMD = 3,
  CMD_TRIGGER_CMD = 4,
  CMD_EXIT = 100
};
bool enum_cmd_IsValid(int value);
const enum_cmd enum_cmd_MIN = CMD_UNKNOWN;
const enum_cmd enum_cmd_MAX = CMD_EXIT;
const int enum_cmd_ARRAYSIZE = enum_cmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* enum_cmd_descriptor();
inline const ::std::string& enum_cmd_Name(enum_cmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    enum_cmd_descriptor(), value);
}
inline bool enum_cmd_Parse(
    const ::std::string& name, enum_cmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enum_cmd>(
    enum_cmd_descriptor(), name, value);
}
enum enum_running_mode {
  RUNNING_MODE_UNKNOWN = 0,
  RUNNING_MODE_ONLINE = 1,
  RUNNING_MODE_DEBUG = 2
};
bool enum_running_mode_IsValid(int value);
const enum_running_mode enum_running_mode_MIN = RUNNING_MODE_UNKNOWN;
const enum_running_mode enum_running_mode_MAX = RUNNING_MODE_DEBUG;
const int enum_running_mode_ARRAYSIZE = enum_running_mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* enum_running_mode_descriptor();
inline const ::std::string& enum_running_mode_Name(enum_running_mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    enum_running_mode_descriptor(), value);
}
inline bool enum_running_mode_Parse(
    const ::std::string& name, enum_running_mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enum_running_mode>(
    enum_running_mode_descriptor(), name, value);
}
enum enum_value_type {
  VALUE_TYPE_UNKNOWN = 0,
  VALUE_TYPE_INT = 1,
  VALUE_TYPE_FLOAT = 2,
  VALUE_TYPE_STRING = 3,
  VALUE_TYPE_LIST = 4,
  VALUE_TYPE_BOOL = 5
};
bool enum_value_type_IsValid(int value);
const enum_value_type enum_value_type_MIN = VALUE_TYPE_UNKNOWN;
const enum_value_type enum_value_type_MAX = VALUE_TYPE_BOOL;
const int enum_value_type_ARRAYSIZE = enum_value_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* enum_value_type_descriptor();
inline const ::std::string& enum_value_type_Name(enum_value_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    enum_value_type_descriptor(), value);
}
inline bool enum_value_type_Parse(
    const ::std::string& name, enum_value_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enum_value_type>(
    enum_value_type_descriptor(), name, value);
}
// ===================================================================

class trigger_snapone_info : public ::google::protobuf::Message {
 public:
  trigger_snapone_info();
  virtual ~trigger_snapone_info();
  
  trigger_snapone_info(const trigger_snapone_info& from);
  
  inline trigger_snapone_info& operator=(const trigger_snapone_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const trigger_snapone_info& default_instance();
  
  void Swap(trigger_snapone_info* other);
  
  // implements Message ----------------------------------------------
  
  trigger_snapone_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const trigger_snapone_info& from);
  void MergeFrom(const trigger_snapone_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 uint32_group = 1;
  inline bool has_uint32_group() const;
  inline void clear_uint32_group();
  static const int kUint32GroupFieldNumber = 1;
  inline ::google::protobuf::uint32 uint32_group() const;
  inline void set_uint32_group(::google::protobuf::uint32 value);
  
  // optional uint32 uint32_seq = 2;
  inline bool has_uint32_seq() const;
  inline void clear_uint32_seq();
  static const int kUint32SeqFieldNumber = 2;
  inline ::google::protobuf::uint32 uint32_seq() const;
  inline void set_uint32_seq(::google::protobuf::uint32 value);
  
  // optional uint32 uint32_id = 3;
  inline bool has_uint32_id() const;
  inline void clear_uint32_id();
  static const int kUint32IdFieldNumber = 3;
  inline ::google::protobuf::uint32 uint32_id() const;
  inline void set_uint32_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:XZProto.trigger_snapone_info)
 private:
  inline void set_has_uint32_group();
  inline void clear_has_uint32_group();
  inline void set_has_uint32_seq();
  inline void clear_has_uint32_seq();
  inline void set_has_uint32_id();
  inline void clear_has_uint32_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 uint32_group_;
  ::google::protobuf::uint32 uint32_seq_;
  ::google::protobuf::uint32 uint32_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_protocal_2eproto();
  friend void protobuf_AssignDesc_protocal_2eproto();
  friend void protobuf_ShutdownFile_protocal_2eproto();
  
  void InitAsDefaultInstance();
  static trigger_snapone_info* default_instance_;
};
// -------------------------------------------------------------------

class change_running_mode : public ::google::protobuf::Message {
 public:
  change_running_mode();
  virtual ~change_running_mode();
  
  change_running_mode(const change_running_mode& from);
  
  inline change_running_mode& operator=(const change_running_mode& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const change_running_mode& default_instance();
  
  void Swap(change_running_mode* other);
  
  // implements Message ----------------------------------------------
  
  change_running_mode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const change_running_mode& from);
  void MergeFrom(const change_running_mode& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 uint32_input_src = 1;
  inline bool has_uint32_input_src() const;
  inline void clear_uint32_input_src();
  static const int kUint32InputSrcFieldNumber = 1;
  inline ::google::protobuf::uint32 uint32_input_src() const;
  inline void set_uint32_input_src(::google::protobuf::uint32 value);
  
  // optional uint32 uint32_running_mode = 2;
  inline bool has_uint32_running_mode() const;
  inline void clear_uint32_running_mode();
  static const int kUint32RunningModeFieldNumber = 2;
  inline ::google::protobuf::uint32 uint32_running_mode() const;
  inline void set_uint32_running_mode(::google::protobuf::uint32 value);
  
  // optional uint32 uint32_auto_run = 3;
  inline bool has_uint32_auto_run() const;
  inline void clear_uint32_auto_run();
  static const int kUint32AutoRunFieldNumber = 3;
  inline ::google::protobuf::uint32 uint32_auto_run() const;
  inline void set_uint32_auto_run(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:XZProto.change_running_mode)
 private:
  inline void set_has_uint32_input_src();
  inline void clear_has_uint32_input_src();
  inline void set_has_uint32_running_mode();
  inline void clear_has_uint32_running_mode();
  inline void set_has_uint32_auto_run();
  inline void clear_has_uint32_auto_run();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 uint32_input_src_;
  ::google::protobuf::uint32 uint32_running_mode_;
  ::google::protobuf::uint32 uint32_auto_run_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_protocal_2eproto();
  friend void protobuf_AssignDesc_protocal_2eproto();
  friend void protobuf_ShutdownFile_protocal_2eproto();
  
  void InitAsDefaultInstance();
  static change_running_mode* default_instance_;
};
// -------------------------------------------------------------------

class recfg_param : public ::google::protobuf::Message {
 public:
  recfg_param();
  virtual ~recfg_param();
  
  recfg_param(const recfg_param& from);
  
  inline recfg_param& operator=(const recfg_param& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const recfg_param& default_instance();
  
  void Swap(recfg_param* other);
  
  // implements Message ----------------------------------------------
  
  recfg_param* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const recfg_param& from);
  void MergeFrom(const recfg_param& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 uint32_camid = 1;
  inline bool has_uint32_camid() const;
  inline void clear_uint32_camid();
  static const int kUint32CamidFieldNumber = 1;
  inline ::google::protobuf::uint32 uint32_camid() const;
  inline void set_uint32_camid(::google::protobuf::uint32 value);
  
  // optional uint32 uint32_exp = 2;
  inline bool has_uint32_exp() const;
  inline void clear_uint32_exp();
  static const int kUint32ExpFieldNumber = 2;
  inline ::google::protobuf::uint32 uint32_exp() const;
  inline void set_uint32_exp(::google::protobuf::uint32 value);
  
  // optional uint32 uint32_gain = 3;
  inline bool has_uint32_gain() const;
  inline void clear_uint32_gain();
  static const int kUint32GainFieldNumber = 3;
  inline ::google::protobuf::uint32 uint32_gain() const;
  inline void set_uint32_gain(::google::protobuf::uint32 value);
  
  // optional uint32 uint32_speed = 4;
  inline bool has_uint32_speed() const;
  inline void clear_uint32_speed();
  static const int kUint32SpeedFieldNumber = 4;
  inline ::google::protobuf::uint32 uint32_speed() const;
  inline void set_uint32_speed(::google::protobuf::uint32 value);
  
  // optional uint32 uint32_rgain = 5;
  inline bool has_uint32_rgain() const;
  inline void clear_uint32_rgain();
  static const int kUint32RgainFieldNumber = 5;
  inline ::google::protobuf::uint32 uint32_rgain() const;
  inline void set_uint32_rgain(::google::protobuf::uint32 value);
  
  // optional uint32 uint32_ggain = 6;
  inline bool has_uint32_ggain() const;
  inline void clear_uint32_ggain();
  static const int kUint32GgainFieldNumber = 6;
  inline ::google::protobuf::uint32 uint32_ggain() const;
  inline void set_uint32_ggain(::google::protobuf::uint32 value);
  
  // optional uint32 uint32_bgain = 7;
  inline bool has_uint32_bgain() const;
  inline void clear_uint32_bgain();
  static const int kUint32BgainFieldNumber = 7;
  inline ::google::protobuf::uint32 uint32_bgain() const;
  inline void set_uint32_bgain(::google::protobuf::uint32 value);
  
  // optional uint32 uint32_set_if_trigger = 8;
  inline bool has_uint32_set_if_trigger() const;
  inline void clear_uint32_set_if_trigger();
  static const int kUint32SetIfTriggerFieldNumber = 8;
  inline ::google::protobuf::uint32 uint32_set_if_trigger() const;
  inline void set_uint32_set_if_trigger(::google::protobuf::uint32 value);
  
  // optional uint32 uint32_exp2 = 9;
  inline bool has_uint32_exp2() const;
  inline void clear_uint32_exp2();
  static const int kUint32Exp2FieldNumber = 9;
  inline ::google::protobuf::uint32 uint32_exp2() const;
  inline void set_uint32_exp2(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:XZProto.recfg_param)
 private:
  inline void set_has_uint32_camid();
  inline void clear_has_uint32_camid();
  inline void set_has_uint32_exp();
  inline void clear_has_uint32_exp();
  inline void set_has_uint32_gain();
  inline void clear_has_uint32_gain();
  inline void set_has_uint32_speed();
  inline void clear_has_uint32_speed();
  inline void set_has_uint32_rgain();
  inline void clear_has_uint32_rgain();
  inline void set_has_uint32_ggain();
  inline void clear_has_uint32_ggain();
  inline void set_has_uint32_bgain();
  inline void clear_has_uint32_bgain();
  inline void set_has_uint32_set_if_trigger();
  inline void clear_has_uint32_set_if_trigger();
  inline void set_has_uint32_exp2();
  inline void clear_has_uint32_exp2();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 uint32_camid_;
  ::google::protobuf::uint32 uint32_exp_;
  ::google::protobuf::uint32 uint32_gain_;
  ::google::protobuf::uint32 uint32_speed_;
  ::google::protobuf::uint32 uint32_rgain_;
  ::google::protobuf::uint32 uint32_ggain_;
  ::google::protobuf::uint32 uint32_bgain_;
  ::google::protobuf::uint32 uint32_set_if_trigger_;
  ::google::protobuf::uint32 uint32_exp2_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_protocal_2eproto();
  friend void protobuf_AssignDesc_protocal_2eproto();
  friend void protobuf_ShutdownFile_protocal_2eproto();
  
  void InitAsDefaultInstance();
  static recfg_param* default_instance_;
};
// -------------------------------------------------------------------

class cam_ctrl_msg : public ::google::protobuf::Message {
 public:
  cam_ctrl_msg();
  virtual ~cam_ctrl_msg();
  
  cam_ctrl_msg(const cam_ctrl_msg& from);
  
  inline cam_ctrl_msg& operator=(const cam_ctrl_msg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const cam_ctrl_msg& default_instance();
  
  void Swap(cam_ctrl_msg* other);
  
  // implements Message ----------------------------------------------
  
  cam_ctrl_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cam_ctrl_msg& from);
  void MergeFrom(const cam_ctrl_msg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 uint32_cmd = 1;
  inline bool has_uint32_cmd() const;
  inline void clear_uint32_cmd();
  static const int kUint32CmdFieldNumber = 1;
  inline ::google::protobuf::uint32 uint32_cmd() const;
  inline void set_uint32_cmd(::google::protobuf::uint32 value);
  
  // optional uint32 uint32_need_img_process = 2;
  inline bool has_uint32_need_img_process() const;
  inline void clear_uint32_need_img_process();
  static const int kUint32NeedImgProcessFieldNumber = 2;
  inline ::google::protobuf::uint32 uint32_need_img_process() const;
  inline void set_uint32_need_img_process(::google::protobuf::uint32 value);
  
  // optional uint32 uint32_need_storage = 3;
  inline bool has_uint32_need_storage() const;
  inline void clear_uint32_need_storage();
  static const int kUint32NeedStorageFieldNumber = 3;
  inline ::google::protobuf::uint32 uint32_need_storage() const;
  inline void set_uint32_need_storage(::google::protobuf::uint32 value);
  
  // optional uint32 uint32_need_display = 4;
  inline bool has_uint32_need_display() const;
  inline void clear_uint32_need_display();
  static const int kUint32NeedDisplayFieldNumber = 4;
  inline ::google::protobuf::uint32 uint32_need_display() const;
  inline void set_uint32_need_display(::google::protobuf::uint32 value);
  
  // optional uint32 uint32_seq = 5;
  inline bool has_uint32_seq() const;
  inline void clear_uint32_seq();
  static const int kUint32SeqFieldNumber = 5;
  inline ::google::protobuf::uint32 uint32_seq() const;
  inline void set_uint32_seq(::google::protobuf::uint32 value);
  
  // optional uint64 uint64_sync_time = 6;
  inline bool has_uint64_sync_time() const;
  inline void clear_uint64_sync_time();
  static const int kUint64SyncTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 uint64_sync_time() const;
  inline void set_uint64_sync_time(::google::protobuf::uint64 value);
  
  // optional uint64 uint64_trigger_time = 7;
  inline bool has_uint64_trigger_time() const;
  inline void clear_uint64_trigger_time();
  static const int kUint64TriggerTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 uint64_trigger_time() const;
  inline void set_uint64_trigger_time(::google::protobuf::uint64 value);
  
  // optional uint64 uint64_frame_time = 8;
  inline bool has_uint64_frame_time() const;
  inline void clear_uint64_frame_time();
  static const int kUint64FrameTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 uint64_frame_time() const;
  inline void set_uint64_frame_time(::google::protobuf::uint64 value);
  
  // optional uint32 uint32_group = 9;
  inline bool has_uint32_group() const;
  inline void clear_uint32_group();
  static const int kUint32GroupFieldNumber = 9;
  inline ::google::protobuf::uint32 uint32_group() const;
  inline void set_uint32_group(::google::protobuf::uint32 value);
  
  // optional uint32 uint32_trigger_mode = 10;
  inline bool has_uint32_trigger_mode() const;
  inline void clear_uint32_trigger_mode();
  static const int kUint32TriggerModeFieldNumber = 10;
  inline ::google::protobuf::uint32 uint32_trigger_mode() const;
  inline void set_uint32_trigger_mode(::google::protobuf::uint32 value);
  
  // optional uint32 uint32_pysic_camid = 11;
  inline bool has_uint32_pysic_camid() const;
  inline void clear_uint32_pysic_camid();
  static const int kUint32PysicCamidFieldNumber = 11;
  inline ::google::protobuf::uint32 uint32_pysic_camid() const;
  inline void set_uint32_pysic_camid(::google::protobuf::uint32 value);
  
  // optional uint32 uint32_running_mode = 12;
  inline bool has_uint32_running_mode() const;
  inline void clear_uint32_running_mode();
  static const int kUint32RunningModeFieldNumber = 12;
  inline ::google::protobuf::uint32 uint32_running_mode() const;
  inline void set_uint32_running_mode(::google::protobuf::uint32 value);
  
  // optional uint32 uint32_need_feed_back = 13;
  inline bool has_uint32_need_feed_back() const;
  inline void clear_uint32_need_feed_back();
  static const int kUint32NeedFeedBackFieldNumber = 13;
  inline ::google::protobuf::uint32 uint32_need_feed_back() const;
  inline void set_uint32_need_feed_back(::google::protobuf::uint32 value);
  
  // optional uint32 uint32_product_id = 14;
  inline bool has_uint32_product_id() const;
  inline void clear_uint32_product_id();
  static const int kUint32ProductIdFieldNumber = 14;
  inline ::google::protobuf::uint32 uint32_product_id() const;
  inline void set_uint32_product_id(::google::protobuf::uint32 value);
  
  // optional uint32 uint32_reprocess = 15;
  inline bool has_uint32_reprocess() const;
  inline void clear_uint32_reprocess();
  static const int kUint32ReprocessFieldNumber = 15;
  inline ::google::protobuf::uint32 uint32_reprocess() const;
  inline void set_uint32_reprocess(::google::protobuf::uint32 value);
  
  // optional .XZProto.change_running_mode msg_change_running_mode = 20;
  inline bool has_msg_change_running_mode() const;
  inline void clear_msg_change_running_mode();
  static const int kMsgChangeRunningModeFieldNumber = 20;
  inline const ::XZProto::change_running_mode& msg_change_running_mode() const;
  inline ::XZProto::change_running_mode* mutable_msg_change_running_mode();
  inline ::XZProto::change_running_mode* release_msg_change_running_mode();
  
  // repeated .XZProto.recfg_param rpt_msg_recfg_param = 21;
  inline int rpt_msg_recfg_param_size() const;
  inline void clear_rpt_msg_recfg_param();
  static const int kRptMsgRecfgParamFieldNumber = 21;
  inline const ::XZProto::recfg_param& rpt_msg_recfg_param(int index) const;
  inline ::XZProto::recfg_param* mutable_rpt_msg_recfg_param(int index);
  inline ::XZProto::recfg_param* add_rpt_msg_recfg_param();
  inline const ::google::protobuf::RepeatedPtrField< ::XZProto::recfg_param >&
      rpt_msg_recfg_param() const;
  inline ::google::protobuf::RepeatedPtrField< ::XZProto::recfg_param >*
      mutable_rpt_msg_recfg_param();
  
  // optional uint32 uint32_inner_camid = 22;
  inline bool has_uint32_inner_camid() const;
  inline void clear_uint32_inner_camid();
  static const int kUint32InnerCamidFieldNumber = 22;
  inline ::google::protobuf::uint32 uint32_inner_camid() const;
  inline void set_uint32_inner_camid(::google::protobuf::uint32 value);
  
  // optional string str_serial = 23;
  inline bool has_str_serial() const;
  inline void clear_str_serial();
  static const int kStrSerialFieldNumber = 23;
  inline const ::std::string& str_serial() const;
  inline void set_str_serial(const ::std::string& value);
  inline void set_str_serial(const char* value);
  inline void set_str_serial(const char* value, size_t size);
  inline ::std::string* mutable_str_serial();
  inline ::std::string* release_str_serial();
  
  // optional uint32 uint32_pos = 24;
  inline bool has_uint32_pos() const;
  inline void clear_uint32_pos();
  static const int kUint32PosFieldNumber = 24;
  inline ::google::protobuf::uint32 uint32_pos() const;
  inline void set_uint32_pos(::google::protobuf::uint32 value);
  
  // optional string debug_file_name1 = 32;
  inline bool has_debug_file_name1() const;
  inline void clear_debug_file_name1();
  static const int kDebugFileName1FieldNumber = 32;
  inline const ::std::string& debug_file_name1() const;
  inline void set_debug_file_name1(const ::std::string& value);
  inline void set_debug_file_name1(const char* value);
  inline void set_debug_file_name1(const char* value, size_t size);
  inline ::std::string* mutable_debug_file_name1();
  inline ::std::string* release_debug_file_name1();
  
  // optional string debug_file_name2 = 33;
  inline bool has_debug_file_name2() const;
  inline void clear_debug_file_name2();
  static const int kDebugFileName2FieldNumber = 33;
  inline const ::std::string& debug_file_name2() const;
  inline void set_debug_file_name2(const ::std::string& value);
  inline void set_debug_file_name2(const char* value);
  inline void set_debug_file_name2(const char* value, size_t size);
  inline ::std::string* mutable_debug_file_name2();
  inline ::std::string* release_debug_file_name2();
  
  // optional string debug_file_name3 = 34;
  inline bool has_debug_file_name3() const;
  inline void clear_debug_file_name3();
  static const int kDebugFileName3FieldNumber = 34;
  inline const ::std::string& debug_file_name3() const;
  inline void set_debug_file_name3(const ::std::string& value);
  inline void set_debug_file_name3(const char* value);
  inline void set_debug_file_name3(const char* value, size_t size);
  inline ::std::string* mutable_debug_file_name3();
  inline ::std::string* release_debug_file_name3();
  
  // optional string debug_file_name4 = 35;
  inline bool has_debug_file_name4() const;
  inline void clear_debug_file_name4();
  static const int kDebugFileName4FieldNumber = 35;
  inline const ::std::string& debug_file_name4() const;
  inline void set_debug_file_name4(const ::std::string& value);
  inline void set_debug_file_name4(const char* value);
  inline void set_debug_file_name4(const char* value, size_t size);
  inline ::std::string* mutable_debug_file_name4();
  inline ::std::string* release_debug_file_name4();
  
  // @@protoc_insertion_point(class_scope:XZProto.cam_ctrl_msg)
 private:
  inline void set_has_uint32_cmd();
  inline void clear_has_uint32_cmd();
  inline void set_has_uint32_need_img_process();
  inline void clear_has_uint32_need_img_process();
  inline void set_has_uint32_need_storage();
  inline void clear_has_uint32_need_storage();
  inline void set_has_uint32_need_display();
  inline void clear_has_uint32_need_display();
  inline void set_has_uint32_seq();
  inline void clear_has_uint32_seq();
  inline void set_has_uint64_sync_time();
  inline void clear_has_uint64_sync_time();
  inline void set_has_uint64_trigger_time();
  inline void clear_has_uint64_trigger_time();
  inline void set_has_uint64_frame_time();
  inline void clear_has_uint64_frame_time();
  inline void set_has_uint32_group();
  inline void clear_has_uint32_group();
  inline void set_has_uint32_trigger_mode();
  inline void clear_has_uint32_trigger_mode();
  inline void set_has_uint32_pysic_camid();
  inline void clear_has_uint32_pysic_camid();
  inline void set_has_uint32_running_mode();
  inline void clear_has_uint32_running_mode();
  inline void set_has_uint32_need_feed_back();
  inline void clear_has_uint32_need_feed_back();
  inline void set_has_uint32_product_id();
  inline void clear_has_uint32_product_id();
  inline void set_has_uint32_reprocess();
  inline void clear_has_uint32_reprocess();
  inline void set_has_msg_change_running_mode();
  inline void clear_has_msg_change_running_mode();
  inline void set_has_uint32_inner_camid();
  inline void clear_has_uint32_inner_camid();
  inline void set_has_str_serial();
  inline void clear_has_str_serial();
  inline void set_has_uint32_pos();
  inline void clear_has_uint32_pos();
  inline void set_has_debug_file_name1();
  inline void clear_has_debug_file_name1();
  inline void set_has_debug_file_name2();
  inline void clear_has_debug_file_name2();
  inline void set_has_debug_file_name3();
  inline void clear_has_debug_file_name3();
  inline void set_has_debug_file_name4();
  inline void clear_has_debug_file_name4();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 uint32_cmd_;
  ::google::protobuf::uint32 uint32_need_img_process_;
  ::google::protobuf::uint32 uint32_need_storage_;
  ::google::protobuf::uint32 uint32_need_display_;
  ::google::protobuf::uint64 uint64_sync_time_;
  ::google::protobuf::uint64 uint64_trigger_time_;
  ::google::protobuf::uint32 uint32_seq_;
  ::google::protobuf::uint32 uint32_group_;
  ::google::protobuf::uint64 uint64_frame_time_;
  ::google::protobuf::uint32 uint32_trigger_mode_;
  ::google::protobuf::uint32 uint32_pysic_camid_;
  ::google::protobuf::uint32 uint32_running_mode_;
  ::google::protobuf::uint32 uint32_need_feed_back_;
  ::google::protobuf::uint32 uint32_product_id_;
  ::google::protobuf::uint32 uint32_reprocess_;
  ::XZProto::change_running_mode* msg_change_running_mode_;
  ::google::protobuf::RepeatedPtrField< ::XZProto::recfg_param > rpt_msg_recfg_param_;
  ::std::string* str_serial_;
  ::google::protobuf::uint32 uint32_inner_camid_;
  ::google::protobuf::uint32 uint32_pos_;
  ::std::string* debug_file_name1_;
  ::std::string* debug_file_name2_;
  ::std::string* debug_file_name3_;
  ::std::string* debug_file_name4_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];
  
  friend void  protobuf_AddDesc_protocal_2eproto();
  friend void protobuf_AssignDesc_protocal_2eproto();
  friend void protobuf_ShutdownFile_protocal_2eproto();
  
  void InitAsDefaultInstance();
  static cam_ctrl_msg* default_instance_;
};
// -------------------------------------------------------------------

class value_item : public ::google::protobuf::Message {
 public:
  value_item();
  virtual ~value_item();
  
  value_item(const value_item& from);
  
  inline value_item& operator=(const value_item& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const value_item& default_instance();
  
  void Swap(value_item* other);
  
  // implements Message ----------------------------------------------
  
  value_item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const value_item& from);
  void MergeFrom(const value_item& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string str_name = 1;
  inline bool has_str_name() const;
  inline void clear_str_name();
  static const int kStrNameFieldNumber = 1;
  inline const ::std::string& str_name() const;
  inline void set_str_name(const ::std::string& value);
  inline void set_str_name(const char* value);
  inline void set_str_name(const char* value, size_t size);
  inline ::std::string* mutable_str_name();
  inline ::std::string* release_str_name();
  
  // optional uint32 uint32_idx = 2;
  inline bool has_uint32_idx() const;
  inline void clear_uint32_idx();
  static const int kUint32IdxFieldNumber = 2;
  inline ::google::protobuf::uint32 uint32_idx() const;
  inline void set_uint32_idx(::google::protobuf::uint32 value);
  
  // optional uint32 uint32_type = 3 [default = 3];
  inline bool has_uint32_type() const;
  inline void clear_uint32_type();
  static const int kUint32TypeFieldNumber = 3;
  inline ::google::protobuf::uint32 uint32_type() const;
  inline void set_uint32_type(::google::protobuf::uint32 value);
  
  // optional string str_value = 4;
  inline bool has_str_value() const;
  inline void clear_str_value();
  static const int kStrValueFieldNumber = 4;
  inline const ::std::string& str_value() const;
  inline void set_str_value(const ::std::string& value);
  inline void set_str_value(const char* value);
  inline void set_str_value(const char* value, size_t size);
  inline ::std::string* mutable_str_value();
  inline ::std::string* release_str_value();
  
  // optional uint32 uint32_value = 5;
  inline bool has_uint32_value() const;
  inline void clear_uint32_value();
  static const int kUint32ValueFieldNumber = 5;
  inline ::google::protobuf::uint32 uint32_value() const;
  inline void set_uint32_value(::google::protobuf::uint32 value);
  
  // optional double double_value = 6;
  inline bool has_double_value() const;
  inline void clear_double_value();
  static const int kDoubleValueFieldNumber = 6;
  inline double double_value() const;
  inline void set_double_value(double value);
  
  // repeated string rpt_str_value = 7;
  inline int rpt_str_value_size() const;
  inline void clear_rpt_str_value();
  static const int kRptStrValueFieldNumber = 7;
  inline const ::std::string& rpt_str_value(int index) const;
  inline ::std::string* mutable_rpt_str_value(int index);
  inline void set_rpt_str_value(int index, const ::std::string& value);
  inline void set_rpt_str_value(int index, const char* value);
  inline void set_rpt_str_value(int index, const char* value, size_t size);
  inline ::std::string* add_rpt_str_value();
  inline void add_rpt_str_value(const ::std::string& value);
  inline void add_rpt_str_value(const char* value);
  inline void add_rpt_str_value(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& rpt_str_value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_rpt_str_value();
  
  // optional uint32 uint32_invisibale = 8;
  inline bool has_uint32_invisibale() const;
  inline void clear_uint32_invisibale();
  static const int kUint32InvisibaleFieldNumber = 8;
  inline ::google::protobuf::uint32 uint32_invisibale() const;
  inline void set_uint32_invisibale(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:XZProto.value_item)
 private:
  inline void set_has_str_name();
  inline void clear_has_str_name();
  inline void set_has_uint32_idx();
  inline void clear_has_uint32_idx();
  inline void set_has_uint32_type();
  inline void clear_has_uint32_type();
  inline void set_has_str_value();
  inline void clear_has_str_value();
  inline void set_has_uint32_value();
  inline void clear_has_uint32_value();
  inline void set_has_double_value();
  inline void clear_has_double_value();
  inline void set_has_uint32_invisibale();
  inline void clear_has_uint32_invisibale();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* str_name_;
  ::google::protobuf::uint32 uint32_idx_;
  ::google::protobuf::uint32 uint32_type_;
  ::std::string* str_value_;
  double double_value_;
  ::google::protobuf::uint32 uint32_value_;
  ::google::protobuf::uint32 uint32_invisibale_;
  ::google::protobuf::RepeatedPtrField< ::std::string> rpt_str_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_protocal_2eproto();
  friend void protobuf_AssignDesc_protocal_2eproto();
  friend void protobuf_ShutdownFile_protocal_2eproto();
  
  void InitAsDefaultInstance();
  static value_item* default_instance_;
};
// -------------------------------------------------------------------

class tree_item : public ::google::protobuf::Message {
 public:
  tree_item();
  virtual ~tree_item();
  
  tree_item(const tree_item& from);
  
  inline tree_item& operator=(const tree_item& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const tree_item& default_instance();
  
  void Swap(tree_item* other);
  
  // implements Message ----------------------------------------------
  
  tree_item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tree_item& from);
  void MergeFrom(const tree_item& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string str_name = 1;
  inline bool has_str_name() const;
  inline void clear_str_name();
  static const int kStrNameFieldNumber = 1;
  inline const ::std::string& str_name() const;
  inline void set_str_name(const ::std::string& value);
  inline void set_str_name(const char* value);
  inline void set_str_name(const char* value, size_t size);
  inline ::std::string* mutable_str_name();
  inline ::std::string* release_str_name();
  
  // optional uint32 uint32_bchecked = 2;
  inline bool has_uint32_bchecked() const;
  inline void clear_uint32_bchecked();
  static const int kUint32BcheckedFieldNumber = 2;
  inline ::google::protobuf::uint32 uint32_bchecked() const;
  inline void set_uint32_bchecked(::google::protobuf::uint32 value);
  
  // repeated .XZProto.value_item rpt_msg_value_item = 3;
  inline int rpt_msg_value_item_size() const;
  inline void clear_rpt_msg_value_item();
  static const int kRptMsgValueItemFieldNumber = 3;
  inline const ::XZProto::value_item& rpt_msg_value_item(int index) const;
  inline ::XZProto::value_item* mutable_rpt_msg_value_item(int index);
  inline ::XZProto::value_item* add_rpt_msg_value_item();
  inline const ::google::protobuf::RepeatedPtrField< ::XZProto::value_item >&
      rpt_msg_value_item() const;
  inline ::google::protobuf::RepeatedPtrField< ::XZProto::value_item >*
      mutable_rpt_msg_value_item();
  
  // repeated .XZProto.tree_item rpt_msg_tree_item = 4;
  inline int rpt_msg_tree_item_size() const;
  inline void clear_rpt_msg_tree_item();
  static const int kRptMsgTreeItemFieldNumber = 4;
  inline const ::XZProto::tree_item& rpt_msg_tree_item(int index) const;
  inline ::XZProto::tree_item* mutable_rpt_msg_tree_item(int index);
  inline ::XZProto::tree_item* add_rpt_msg_tree_item();
  inline const ::google::protobuf::RepeatedPtrField< ::XZProto::tree_item >&
      rpt_msg_tree_item() const;
  inline ::google::protobuf::RepeatedPtrField< ::XZProto::tree_item >*
      mutable_rpt_msg_tree_item();
  
  // @@protoc_insertion_point(class_scope:XZProto.tree_item)
 private:
  inline void set_has_str_name();
  inline void clear_has_str_name();
  inline void set_has_uint32_bchecked();
  inline void clear_has_uint32_bchecked();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* str_name_;
  ::google::protobuf::RepeatedPtrField< ::XZProto::value_item > rpt_msg_value_item_;
  ::google::protobuf::RepeatedPtrField< ::XZProto::tree_item > rpt_msg_tree_item_;
  ::google::protobuf::uint32 uint32_bchecked_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_protocal_2eproto();
  friend void protobuf_AssignDesc_protocal_2eproto();
  friend void protobuf_ShutdownFile_protocal_2eproto();
  
  void InitAsDefaultInstance();
  static tree_item* default_instance_;
};
// -------------------------------------------------------------------

class tree_cfg : public ::google::protobuf::Message {
 public:
  tree_cfg();
  virtual ~tree_cfg();
  
  tree_cfg(const tree_cfg& from);
  
  inline tree_cfg& operator=(const tree_cfg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const tree_cfg& default_instance();
  
  void Swap(tree_cfg* other);
  
  // implements Message ----------------------------------------------
  
  tree_cfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tree_cfg& from);
  void MergeFrom(const tree_cfg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .XZProto.tree_item rpt_msg_tree_item = 1;
  inline int rpt_msg_tree_item_size() const;
  inline void clear_rpt_msg_tree_item();
  static const int kRptMsgTreeItemFieldNumber = 1;
  inline const ::XZProto::tree_item& rpt_msg_tree_item(int index) const;
  inline ::XZProto::tree_item* mutable_rpt_msg_tree_item(int index);
  inline ::XZProto::tree_item* add_rpt_msg_tree_item();
  inline const ::google::protobuf::RepeatedPtrField< ::XZProto::tree_item >&
      rpt_msg_tree_item() const;
  inline ::google::protobuf::RepeatedPtrField< ::XZProto::tree_item >*
      mutable_rpt_msg_tree_item();
  
  // @@protoc_insertion_point(class_scope:XZProto.tree_cfg)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::XZProto::tree_item > rpt_msg_tree_item_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_protocal_2eproto();
  friend void protobuf_AssignDesc_protocal_2eproto();
  friend void protobuf_ShutdownFile_protocal_2eproto();
  
  void InitAsDefaultInstance();
  static tree_cfg* default_instance_;
};
// -------------------------------------------------------------------

class enc_msg : public ::google::protobuf::Message {
 public:
  enc_msg();
  virtual ~enc_msg();
  
  enc_msg(const enc_msg& from);
  
  inline enc_msg& operator=(const enc_msg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const enc_msg& default_instance();
  
  void Swap(enc_msg* other);
  
  // implements Message ----------------------------------------------
  
  enc_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const enc_msg& from);
  void MergeFrom(const enc_msg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 uint32_year = 1;
  inline bool has_uint32_year() const;
  inline void clear_uint32_year();
  static const int kUint32YearFieldNumber = 1;
  inline ::google::protobuf::uint32 uint32_year() const;
  inline void set_uint32_year(::google::protobuf::uint32 value);
  
  // optional bytes bytes_randon = 2;
  inline bool has_bytes_randon() const;
  inline void clear_bytes_randon();
  static const int kBytesRandonFieldNumber = 2;
  inline const ::std::string& bytes_randon() const;
  inline void set_bytes_randon(const ::std::string& value);
  inline void set_bytes_randon(const char* value);
  inline void set_bytes_randon(const void* value, size_t size);
  inline ::std::string* mutable_bytes_randon();
  inline ::std::string* release_bytes_randon();
  
  // optional uint32 uint32_month = 3;
  inline bool has_uint32_month() const;
  inline void clear_uint32_month();
  static const int kUint32MonthFieldNumber = 3;
  inline ::google::protobuf::uint32 uint32_month() const;
  inline void set_uint32_month(::google::protobuf::uint32 value);
  
  // optional uint32 uint32_day = 4;
  inline bool has_uint32_day() const;
  inline void clear_uint32_day();
  static const int kUint32DayFieldNumber = 4;
  inline ::google::protobuf::uint32 uint32_day() const;
  inline void set_uint32_day(::google::protobuf::uint32 value);
  
  // optional bytes bytes_serial = 5;
  inline bool has_bytes_serial() const;
  inline void clear_bytes_serial();
  static const int kBytesSerialFieldNumber = 5;
  inline const ::std::string& bytes_serial() const;
  inline void set_bytes_serial(const ::std::string& value);
  inline void set_bytes_serial(const char* value);
  inline void set_bytes_serial(const void* value, size_t size);
  inline ::std::string* mutable_bytes_serial();
  inline ::std::string* release_bytes_serial();
  
  // @@protoc_insertion_point(class_scope:XZProto.enc_msg)
 private:
  inline void set_has_uint32_year();
  inline void clear_has_uint32_year();
  inline void set_has_bytes_randon();
  inline void clear_has_bytes_randon();
  inline void set_has_uint32_month();
  inline void clear_has_uint32_month();
  inline void set_has_uint32_day();
  inline void clear_has_uint32_day();
  inline void set_has_bytes_serial();
  inline void clear_has_bytes_serial();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* bytes_randon_;
  ::google::protobuf::uint32 uint32_year_;
  ::google::protobuf::uint32 uint32_month_;
  ::std::string* bytes_serial_;
  ::google::protobuf::uint32 uint32_day_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_protocal_2eproto();
  friend void protobuf_AssignDesc_protocal_2eproto();
  friend void protobuf_ShutdownFile_protocal_2eproto();
  
  void InitAsDefaultInstance();
  static enc_msg* default_instance_;
};
// ===================================================================


// ===================================================================

// trigger_snapone_info

// optional uint32 uint32_group = 1;
inline bool trigger_snapone_info::has_uint32_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void trigger_snapone_info::set_has_uint32_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void trigger_snapone_info::clear_has_uint32_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void trigger_snapone_info::clear_uint32_group() {
  uint32_group_ = 0u;
  clear_has_uint32_group();
}
inline ::google::protobuf::uint32 trigger_snapone_info::uint32_group() const {
  return uint32_group_;
}
inline void trigger_snapone_info::set_uint32_group(::google::protobuf::uint32 value) {
  set_has_uint32_group();
  uint32_group_ = value;
}

// optional uint32 uint32_seq = 2;
inline bool trigger_snapone_info::has_uint32_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void trigger_snapone_info::set_has_uint32_seq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void trigger_snapone_info::clear_has_uint32_seq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void trigger_snapone_info::clear_uint32_seq() {
  uint32_seq_ = 0u;
  clear_has_uint32_seq();
}
inline ::google::protobuf::uint32 trigger_snapone_info::uint32_seq() const {
  return uint32_seq_;
}
inline void trigger_snapone_info::set_uint32_seq(::google::protobuf::uint32 value) {
  set_has_uint32_seq();
  uint32_seq_ = value;
}

// optional uint32 uint32_id = 3;
inline bool trigger_snapone_info::has_uint32_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void trigger_snapone_info::set_has_uint32_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void trigger_snapone_info::clear_has_uint32_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void trigger_snapone_info::clear_uint32_id() {
  uint32_id_ = 0u;
  clear_has_uint32_id();
}
inline ::google::protobuf::uint32 trigger_snapone_info::uint32_id() const {
  return uint32_id_;
}
inline void trigger_snapone_info::set_uint32_id(::google::protobuf::uint32 value) {
  set_has_uint32_id();
  uint32_id_ = value;
}

// -------------------------------------------------------------------

// change_running_mode

// optional uint32 uint32_input_src = 1;
inline bool change_running_mode::has_uint32_input_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void change_running_mode::set_has_uint32_input_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void change_running_mode::clear_has_uint32_input_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void change_running_mode::clear_uint32_input_src() {
  uint32_input_src_ = 0u;
  clear_has_uint32_input_src();
}
inline ::google::protobuf::uint32 change_running_mode::uint32_input_src() const {
  return uint32_input_src_;
}
inline void change_running_mode::set_uint32_input_src(::google::protobuf::uint32 value) {
  set_has_uint32_input_src();
  uint32_input_src_ = value;
}

// optional uint32 uint32_running_mode = 2;
inline bool change_running_mode::has_uint32_running_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void change_running_mode::set_has_uint32_running_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void change_running_mode::clear_has_uint32_running_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void change_running_mode::clear_uint32_running_mode() {
  uint32_running_mode_ = 0u;
  clear_has_uint32_running_mode();
}
inline ::google::protobuf::uint32 change_running_mode::uint32_running_mode() const {
  return uint32_running_mode_;
}
inline void change_running_mode::set_uint32_running_mode(::google::protobuf::uint32 value) {
  set_has_uint32_running_mode();
  uint32_running_mode_ = value;
}

// optional uint32 uint32_auto_run = 3;
inline bool change_running_mode::has_uint32_auto_run() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void change_running_mode::set_has_uint32_auto_run() {
  _has_bits_[0] |= 0x00000004u;
}
inline void change_running_mode::clear_has_uint32_auto_run() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void change_running_mode::clear_uint32_auto_run() {
  uint32_auto_run_ = 0u;
  clear_has_uint32_auto_run();
}
inline ::google::protobuf::uint32 change_running_mode::uint32_auto_run() const {
  return uint32_auto_run_;
}
inline void change_running_mode::set_uint32_auto_run(::google::protobuf::uint32 value) {
  set_has_uint32_auto_run();
  uint32_auto_run_ = value;
}

// -------------------------------------------------------------------

// recfg_param

// optional uint32 uint32_camid = 1;
inline bool recfg_param::has_uint32_camid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void recfg_param::set_has_uint32_camid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void recfg_param::clear_has_uint32_camid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void recfg_param::clear_uint32_camid() {
  uint32_camid_ = 0u;
  clear_has_uint32_camid();
}
inline ::google::protobuf::uint32 recfg_param::uint32_camid() const {
  return uint32_camid_;
}
inline void recfg_param::set_uint32_camid(::google::protobuf::uint32 value) {
  set_has_uint32_camid();
  uint32_camid_ = value;
}

// optional uint32 uint32_exp = 2;
inline bool recfg_param::has_uint32_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void recfg_param::set_has_uint32_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void recfg_param::clear_has_uint32_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void recfg_param::clear_uint32_exp() {
  uint32_exp_ = 0u;
  clear_has_uint32_exp();
}
inline ::google::protobuf::uint32 recfg_param::uint32_exp() const {
  return uint32_exp_;
}
inline void recfg_param::set_uint32_exp(::google::protobuf::uint32 value) {
  set_has_uint32_exp();
  uint32_exp_ = value;
}

// optional uint32 uint32_gain = 3;
inline bool recfg_param::has_uint32_gain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void recfg_param::set_has_uint32_gain() {
  _has_bits_[0] |= 0x00000004u;
}
inline void recfg_param::clear_has_uint32_gain() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void recfg_param::clear_uint32_gain() {
  uint32_gain_ = 0u;
  clear_has_uint32_gain();
}
inline ::google::protobuf::uint32 recfg_param::uint32_gain() const {
  return uint32_gain_;
}
inline void recfg_param::set_uint32_gain(::google::protobuf::uint32 value) {
  set_has_uint32_gain();
  uint32_gain_ = value;
}

// optional uint32 uint32_speed = 4;
inline bool recfg_param::has_uint32_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void recfg_param::set_has_uint32_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void recfg_param::clear_has_uint32_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void recfg_param::clear_uint32_speed() {
  uint32_speed_ = 0u;
  clear_has_uint32_speed();
}
inline ::google::protobuf::uint32 recfg_param::uint32_speed() const {
  return uint32_speed_;
}
inline void recfg_param::set_uint32_speed(::google::protobuf::uint32 value) {
  set_has_uint32_speed();
  uint32_speed_ = value;
}

// optional uint32 uint32_rgain = 5;
inline bool recfg_param::has_uint32_rgain() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void recfg_param::set_has_uint32_rgain() {
  _has_bits_[0] |= 0x00000010u;
}
inline void recfg_param::clear_has_uint32_rgain() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void recfg_param::clear_uint32_rgain() {
  uint32_rgain_ = 0u;
  clear_has_uint32_rgain();
}
inline ::google::protobuf::uint32 recfg_param::uint32_rgain() const {
  return uint32_rgain_;
}
inline void recfg_param::set_uint32_rgain(::google::protobuf::uint32 value) {
  set_has_uint32_rgain();
  uint32_rgain_ = value;
}

// optional uint32 uint32_ggain = 6;
inline bool recfg_param::has_uint32_ggain() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void recfg_param::set_has_uint32_ggain() {
  _has_bits_[0] |= 0x00000020u;
}
inline void recfg_param::clear_has_uint32_ggain() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void recfg_param::clear_uint32_ggain() {
  uint32_ggain_ = 0u;
  clear_has_uint32_ggain();
}
inline ::google::protobuf::uint32 recfg_param::uint32_ggain() const {
  return uint32_ggain_;
}
inline void recfg_param::set_uint32_ggain(::google::protobuf::uint32 value) {
  set_has_uint32_ggain();
  uint32_ggain_ = value;
}

// optional uint32 uint32_bgain = 7;
inline bool recfg_param::has_uint32_bgain() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void recfg_param::set_has_uint32_bgain() {
  _has_bits_[0] |= 0x00000040u;
}
inline void recfg_param::clear_has_uint32_bgain() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void recfg_param::clear_uint32_bgain() {
  uint32_bgain_ = 0u;
  clear_has_uint32_bgain();
}
inline ::google::protobuf::uint32 recfg_param::uint32_bgain() const {
  return uint32_bgain_;
}
inline void recfg_param::set_uint32_bgain(::google::protobuf::uint32 value) {
  set_has_uint32_bgain();
  uint32_bgain_ = value;
}

// optional uint32 uint32_set_if_trigger = 8;
inline bool recfg_param::has_uint32_set_if_trigger() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void recfg_param::set_has_uint32_set_if_trigger() {
  _has_bits_[0] |= 0x00000080u;
}
inline void recfg_param::clear_has_uint32_set_if_trigger() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void recfg_param::clear_uint32_set_if_trigger() {
  uint32_set_if_trigger_ = 0u;
  clear_has_uint32_set_if_trigger();
}
inline ::google::protobuf::uint32 recfg_param::uint32_set_if_trigger() const {
  return uint32_set_if_trigger_;
}
inline void recfg_param::set_uint32_set_if_trigger(::google::protobuf::uint32 value) {
  set_has_uint32_set_if_trigger();
  uint32_set_if_trigger_ = value;
}

// optional uint32 uint32_exp2 = 9;
inline bool recfg_param::has_uint32_exp2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void recfg_param::set_has_uint32_exp2() {
  _has_bits_[0] |= 0x00000100u;
}
inline void recfg_param::clear_has_uint32_exp2() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void recfg_param::clear_uint32_exp2() {
  uint32_exp2_ = 0u;
  clear_has_uint32_exp2();
}
inline ::google::protobuf::uint32 recfg_param::uint32_exp2() const {
  return uint32_exp2_;
}
inline void recfg_param::set_uint32_exp2(::google::protobuf::uint32 value) {
  set_has_uint32_exp2();
  uint32_exp2_ = value;
}

// -------------------------------------------------------------------

// cam_ctrl_msg

// optional uint32 uint32_cmd = 1;
inline bool cam_ctrl_msg::has_uint32_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cam_ctrl_msg::set_has_uint32_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cam_ctrl_msg::clear_has_uint32_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cam_ctrl_msg::clear_uint32_cmd() {
  uint32_cmd_ = 0u;
  clear_has_uint32_cmd();
}
inline ::google::protobuf::uint32 cam_ctrl_msg::uint32_cmd() const {
  return uint32_cmd_;
}
inline void cam_ctrl_msg::set_uint32_cmd(::google::protobuf::uint32 value) {
  set_has_uint32_cmd();
  uint32_cmd_ = value;
}

// optional uint32 uint32_need_img_process = 2;
inline bool cam_ctrl_msg::has_uint32_need_img_process() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cam_ctrl_msg::set_has_uint32_need_img_process() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cam_ctrl_msg::clear_has_uint32_need_img_process() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cam_ctrl_msg::clear_uint32_need_img_process() {
  uint32_need_img_process_ = 0u;
  clear_has_uint32_need_img_process();
}
inline ::google::protobuf::uint32 cam_ctrl_msg::uint32_need_img_process() const {
  return uint32_need_img_process_;
}
inline void cam_ctrl_msg::set_uint32_need_img_process(::google::protobuf::uint32 value) {
  set_has_uint32_need_img_process();
  uint32_need_img_process_ = value;
}

// optional uint32 uint32_need_storage = 3;
inline bool cam_ctrl_msg::has_uint32_need_storage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cam_ctrl_msg::set_has_uint32_need_storage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cam_ctrl_msg::clear_has_uint32_need_storage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cam_ctrl_msg::clear_uint32_need_storage() {
  uint32_need_storage_ = 0u;
  clear_has_uint32_need_storage();
}
inline ::google::protobuf::uint32 cam_ctrl_msg::uint32_need_storage() const {
  return uint32_need_storage_;
}
inline void cam_ctrl_msg::set_uint32_need_storage(::google::protobuf::uint32 value) {
  set_has_uint32_need_storage();
  uint32_need_storage_ = value;
}

// optional uint32 uint32_need_display = 4;
inline bool cam_ctrl_msg::has_uint32_need_display() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cam_ctrl_msg::set_has_uint32_need_display() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cam_ctrl_msg::clear_has_uint32_need_display() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cam_ctrl_msg::clear_uint32_need_display() {
  uint32_need_display_ = 0u;
  clear_has_uint32_need_display();
}
inline ::google::protobuf::uint32 cam_ctrl_msg::uint32_need_display() const {
  return uint32_need_display_;
}
inline void cam_ctrl_msg::set_uint32_need_display(::google::protobuf::uint32 value) {
  set_has_uint32_need_display();
  uint32_need_display_ = value;
}

// optional uint32 uint32_seq = 5;
inline bool cam_ctrl_msg::has_uint32_seq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void cam_ctrl_msg::set_has_uint32_seq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void cam_ctrl_msg::clear_has_uint32_seq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void cam_ctrl_msg::clear_uint32_seq() {
  uint32_seq_ = 0u;
  clear_has_uint32_seq();
}
inline ::google::protobuf::uint32 cam_ctrl_msg::uint32_seq() const {
  return uint32_seq_;
}
inline void cam_ctrl_msg::set_uint32_seq(::google::protobuf::uint32 value) {
  set_has_uint32_seq();
  uint32_seq_ = value;
}

// optional uint64 uint64_sync_time = 6;
inline bool cam_ctrl_msg::has_uint64_sync_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void cam_ctrl_msg::set_has_uint64_sync_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void cam_ctrl_msg::clear_has_uint64_sync_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void cam_ctrl_msg::clear_uint64_sync_time() {
  uint64_sync_time_ = GOOGLE_ULONGLONG(0);
  clear_has_uint64_sync_time();
}
inline ::google::protobuf::uint64 cam_ctrl_msg::uint64_sync_time() const {
  return uint64_sync_time_;
}
inline void cam_ctrl_msg::set_uint64_sync_time(::google::protobuf::uint64 value) {
  set_has_uint64_sync_time();
  uint64_sync_time_ = value;
}

// optional uint64 uint64_trigger_time = 7;
inline bool cam_ctrl_msg::has_uint64_trigger_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void cam_ctrl_msg::set_has_uint64_trigger_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void cam_ctrl_msg::clear_has_uint64_trigger_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void cam_ctrl_msg::clear_uint64_trigger_time() {
  uint64_trigger_time_ = GOOGLE_ULONGLONG(0);
  clear_has_uint64_trigger_time();
}
inline ::google::protobuf::uint64 cam_ctrl_msg::uint64_trigger_time() const {
  return uint64_trigger_time_;
}
inline void cam_ctrl_msg::set_uint64_trigger_time(::google::protobuf::uint64 value) {
  set_has_uint64_trigger_time();
  uint64_trigger_time_ = value;
}

// optional uint64 uint64_frame_time = 8;
inline bool cam_ctrl_msg::has_uint64_frame_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void cam_ctrl_msg::set_has_uint64_frame_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void cam_ctrl_msg::clear_has_uint64_frame_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void cam_ctrl_msg::clear_uint64_frame_time() {
  uint64_frame_time_ = GOOGLE_ULONGLONG(0);
  clear_has_uint64_frame_time();
}
inline ::google::protobuf::uint64 cam_ctrl_msg::uint64_frame_time() const {
  return uint64_frame_time_;
}
inline void cam_ctrl_msg::set_uint64_frame_time(::google::protobuf::uint64 value) {
  set_has_uint64_frame_time();
  uint64_frame_time_ = value;
}

// optional uint32 uint32_group = 9;
inline bool cam_ctrl_msg::has_uint32_group() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void cam_ctrl_msg::set_has_uint32_group() {
  _has_bits_[0] |= 0x00000100u;
}
inline void cam_ctrl_msg::clear_has_uint32_group() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void cam_ctrl_msg::clear_uint32_group() {
  uint32_group_ = 0u;
  clear_has_uint32_group();
}
inline ::google::protobuf::uint32 cam_ctrl_msg::uint32_group() const {
  return uint32_group_;
}
inline void cam_ctrl_msg::set_uint32_group(::google::protobuf::uint32 value) {
  set_has_uint32_group();
  uint32_group_ = value;
}

// optional uint32 uint32_trigger_mode = 10;
inline bool cam_ctrl_msg::has_uint32_trigger_mode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void cam_ctrl_msg::set_has_uint32_trigger_mode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void cam_ctrl_msg::clear_has_uint32_trigger_mode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void cam_ctrl_msg::clear_uint32_trigger_mode() {
  uint32_trigger_mode_ = 0u;
  clear_has_uint32_trigger_mode();
}
inline ::google::protobuf::uint32 cam_ctrl_msg::uint32_trigger_mode() const {
  return uint32_trigger_mode_;
}
inline void cam_ctrl_msg::set_uint32_trigger_mode(::google::protobuf::uint32 value) {
  set_has_uint32_trigger_mode();
  uint32_trigger_mode_ = value;
}

// optional uint32 uint32_pysic_camid = 11;
inline bool cam_ctrl_msg::has_uint32_pysic_camid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void cam_ctrl_msg::set_has_uint32_pysic_camid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void cam_ctrl_msg::clear_has_uint32_pysic_camid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void cam_ctrl_msg::clear_uint32_pysic_camid() {
  uint32_pysic_camid_ = 0u;
  clear_has_uint32_pysic_camid();
}
inline ::google::protobuf::uint32 cam_ctrl_msg::uint32_pysic_camid() const {
  return uint32_pysic_camid_;
}
inline void cam_ctrl_msg::set_uint32_pysic_camid(::google::protobuf::uint32 value) {
  set_has_uint32_pysic_camid();
  uint32_pysic_camid_ = value;
}

// optional uint32 uint32_running_mode = 12;
inline bool cam_ctrl_msg::has_uint32_running_mode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void cam_ctrl_msg::set_has_uint32_running_mode() {
  _has_bits_[0] |= 0x00000800u;
}
inline void cam_ctrl_msg::clear_has_uint32_running_mode() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void cam_ctrl_msg::clear_uint32_running_mode() {
  uint32_running_mode_ = 0u;
  clear_has_uint32_running_mode();
}
inline ::google::protobuf::uint32 cam_ctrl_msg::uint32_running_mode() const {
  return uint32_running_mode_;
}
inline void cam_ctrl_msg::set_uint32_running_mode(::google::protobuf::uint32 value) {
  set_has_uint32_running_mode();
  uint32_running_mode_ = value;
}

// optional uint32 uint32_need_feed_back = 13;
inline bool cam_ctrl_msg::has_uint32_need_feed_back() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void cam_ctrl_msg::set_has_uint32_need_feed_back() {
  _has_bits_[0] |= 0x00001000u;
}
inline void cam_ctrl_msg::clear_has_uint32_need_feed_back() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void cam_ctrl_msg::clear_uint32_need_feed_back() {
  uint32_need_feed_back_ = 0u;
  clear_has_uint32_need_feed_back();
}
inline ::google::protobuf::uint32 cam_ctrl_msg::uint32_need_feed_back() const {
  return uint32_need_feed_back_;
}
inline void cam_ctrl_msg::set_uint32_need_feed_back(::google::protobuf::uint32 value) {
  set_has_uint32_need_feed_back();
  uint32_need_feed_back_ = value;
}

// optional uint32 uint32_product_id = 14;
inline bool cam_ctrl_msg::has_uint32_product_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void cam_ctrl_msg::set_has_uint32_product_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void cam_ctrl_msg::clear_has_uint32_product_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void cam_ctrl_msg::clear_uint32_product_id() {
  uint32_product_id_ = 0u;
  clear_has_uint32_product_id();
}
inline ::google::protobuf::uint32 cam_ctrl_msg::uint32_product_id() const {
  return uint32_product_id_;
}
inline void cam_ctrl_msg::set_uint32_product_id(::google::protobuf::uint32 value) {
  set_has_uint32_product_id();
  uint32_product_id_ = value;
}

// optional uint32 uint32_reprocess = 15;
inline bool cam_ctrl_msg::has_uint32_reprocess() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void cam_ctrl_msg::set_has_uint32_reprocess() {
  _has_bits_[0] |= 0x00004000u;
}
inline void cam_ctrl_msg::clear_has_uint32_reprocess() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void cam_ctrl_msg::clear_uint32_reprocess() {
  uint32_reprocess_ = 0u;
  clear_has_uint32_reprocess();
}
inline ::google::protobuf::uint32 cam_ctrl_msg::uint32_reprocess() const {
  return uint32_reprocess_;
}
inline void cam_ctrl_msg::set_uint32_reprocess(::google::protobuf::uint32 value) {
  set_has_uint32_reprocess();
  uint32_reprocess_ = value;
}

// optional .XZProto.change_running_mode msg_change_running_mode = 20;
inline bool cam_ctrl_msg::has_msg_change_running_mode() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void cam_ctrl_msg::set_has_msg_change_running_mode() {
  _has_bits_[0] |= 0x00008000u;
}
inline void cam_ctrl_msg::clear_has_msg_change_running_mode() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void cam_ctrl_msg::clear_msg_change_running_mode() {
  if (msg_change_running_mode_ != NULL) msg_change_running_mode_->::XZProto::change_running_mode::Clear();
  clear_has_msg_change_running_mode();
}
inline const ::XZProto::change_running_mode& cam_ctrl_msg::msg_change_running_mode() const {
  return msg_change_running_mode_ != NULL ? *msg_change_running_mode_ : *default_instance_->msg_change_running_mode_;
}
inline ::XZProto::change_running_mode* cam_ctrl_msg::mutable_msg_change_running_mode() {
  set_has_msg_change_running_mode();
  if (msg_change_running_mode_ == NULL) msg_change_running_mode_ = new ::XZProto::change_running_mode;
  return msg_change_running_mode_;
}
inline ::XZProto::change_running_mode* cam_ctrl_msg::release_msg_change_running_mode() {
  clear_has_msg_change_running_mode();
  ::XZProto::change_running_mode* temp = msg_change_running_mode_;
  msg_change_running_mode_ = NULL;
  return temp;
}

// repeated .XZProto.recfg_param rpt_msg_recfg_param = 21;
inline int cam_ctrl_msg::rpt_msg_recfg_param_size() const {
  return rpt_msg_recfg_param_.size();
}
inline void cam_ctrl_msg::clear_rpt_msg_recfg_param() {
  rpt_msg_recfg_param_.Clear();
}
inline const ::XZProto::recfg_param& cam_ctrl_msg::rpt_msg_recfg_param(int index) const {
  return rpt_msg_recfg_param_.Get(index);
}
inline ::XZProto::recfg_param* cam_ctrl_msg::mutable_rpt_msg_recfg_param(int index) {
  return rpt_msg_recfg_param_.Mutable(index);
}
inline ::XZProto::recfg_param* cam_ctrl_msg::add_rpt_msg_recfg_param() {
  return rpt_msg_recfg_param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::XZProto::recfg_param >&
cam_ctrl_msg::rpt_msg_recfg_param() const {
  return rpt_msg_recfg_param_;
}
inline ::google::protobuf::RepeatedPtrField< ::XZProto::recfg_param >*
cam_ctrl_msg::mutable_rpt_msg_recfg_param() {
  return &rpt_msg_recfg_param_;
}

// optional uint32 uint32_inner_camid = 22;
inline bool cam_ctrl_msg::has_uint32_inner_camid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void cam_ctrl_msg::set_has_uint32_inner_camid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void cam_ctrl_msg::clear_has_uint32_inner_camid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void cam_ctrl_msg::clear_uint32_inner_camid() {
  uint32_inner_camid_ = 0u;
  clear_has_uint32_inner_camid();
}
inline ::google::protobuf::uint32 cam_ctrl_msg::uint32_inner_camid() const {
  return uint32_inner_camid_;
}
inline void cam_ctrl_msg::set_uint32_inner_camid(::google::protobuf::uint32 value) {
  set_has_uint32_inner_camid();
  uint32_inner_camid_ = value;
}

// optional string str_serial = 23;
inline bool cam_ctrl_msg::has_str_serial() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void cam_ctrl_msg::set_has_str_serial() {
  _has_bits_[0] |= 0x00040000u;
}
inline void cam_ctrl_msg::clear_has_str_serial() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void cam_ctrl_msg::clear_str_serial() {
  if (str_serial_ != &::google::protobuf::internal::kEmptyString) {
    str_serial_->clear();
  }
  clear_has_str_serial();
}
inline const ::std::string& cam_ctrl_msg::str_serial() const {
  return *str_serial_;
}
inline void cam_ctrl_msg::set_str_serial(const ::std::string& value) {
  set_has_str_serial();
  if (str_serial_ == &::google::protobuf::internal::kEmptyString) {
    str_serial_ = new ::std::string;
  }
  str_serial_->assign(value);
}
inline void cam_ctrl_msg::set_str_serial(const char* value) {
  set_has_str_serial();
  if (str_serial_ == &::google::protobuf::internal::kEmptyString) {
    str_serial_ = new ::std::string;
  }
  str_serial_->assign(value);
}
inline void cam_ctrl_msg::set_str_serial(const char* value, size_t size) {
  set_has_str_serial();
  if (str_serial_ == &::google::protobuf::internal::kEmptyString) {
    str_serial_ = new ::std::string;
  }
  str_serial_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cam_ctrl_msg::mutable_str_serial() {
  set_has_str_serial();
  if (str_serial_ == &::google::protobuf::internal::kEmptyString) {
    str_serial_ = new ::std::string;
  }
  return str_serial_;
}
inline ::std::string* cam_ctrl_msg::release_str_serial() {
  clear_has_str_serial();
  if (str_serial_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_serial_;
    str_serial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 uint32_pos = 24;
inline bool cam_ctrl_msg::has_uint32_pos() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void cam_ctrl_msg::set_has_uint32_pos() {
  _has_bits_[0] |= 0x00080000u;
}
inline void cam_ctrl_msg::clear_has_uint32_pos() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void cam_ctrl_msg::clear_uint32_pos() {
  uint32_pos_ = 0u;
  clear_has_uint32_pos();
}
inline ::google::protobuf::uint32 cam_ctrl_msg::uint32_pos() const {
  return uint32_pos_;
}
inline void cam_ctrl_msg::set_uint32_pos(::google::protobuf::uint32 value) {
  set_has_uint32_pos();
  uint32_pos_ = value;
}

// optional string debug_file_name1 = 32;
inline bool cam_ctrl_msg::has_debug_file_name1() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void cam_ctrl_msg::set_has_debug_file_name1() {
  _has_bits_[0] |= 0x00100000u;
}
inline void cam_ctrl_msg::clear_has_debug_file_name1() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void cam_ctrl_msg::clear_debug_file_name1() {
  if (debug_file_name1_ != &::google::protobuf::internal::kEmptyString) {
    debug_file_name1_->clear();
  }
  clear_has_debug_file_name1();
}
inline const ::std::string& cam_ctrl_msg::debug_file_name1() const {
  return *debug_file_name1_;
}
inline void cam_ctrl_msg::set_debug_file_name1(const ::std::string& value) {
  set_has_debug_file_name1();
  if (debug_file_name1_ == &::google::protobuf::internal::kEmptyString) {
    debug_file_name1_ = new ::std::string;
  }
  debug_file_name1_->assign(value);
}
inline void cam_ctrl_msg::set_debug_file_name1(const char* value) {
  set_has_debug_file_name1();
  if (debug_file_name1_ == &::google::protobuf::internal::kEmptyString) {
    debug_file_name1_ = new ::std::string;
  }
  debug_file_name1_->assign(value);
}
inline void cam_ctrl_msg::set_debug_file_name1(const char* value, size_t size) {
  set_has_debug_file_name1();
  if (debug_file_name1_ == &::google::protobuf::internal::kEmptyString) {
    debug_file_name1_ = new ::std::string;
  }
  debug_file_name1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cam_ctrl_msg::mutable_debug_file_name1() {
  set_has_debug_file_name1();
  if (debug_file_name1_ == &::google::protobuf::internal::kEmptyString) {
    debug_file_name1_ = new ::std::string;
  }
  return debug_file_name1_;
}
inline ::std::string* cam_ctrl_msg::release_debug_file_name1() {
  clear_has_debug_file_name1();
  if (debug_file_name1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = debug_file_name1_;
    debug_file_name1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string debug_file_name2 = 33;
inline bool cam_ctrl_msg::has_debug_file_name2() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void cam_ctrl_msg::set_has_debug_file_name2() {
  _has_bits_[0] |= 0x00200000u;
}
inline void cam_ctrl_msg::clear_has_debug_file_name2() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void cam_ctrl_msg::clear_debug_file_name2() {
  if (debug_file_name2_ != &::google::protobuf::internal::kEmptyString) {
    debug_file_name2_->clear();
  }
  clear_has_debug_file_name2();
}
inline const ::std::string& cam_ctrl_msg::debug_file_name2() const {
  return *debug_file_name2_;
}
inline void cam_ctrl_msg::set_debug_file_name2(const ::std::string& value) {
  set_has_debug_file_name2();
  if (debug_file_name2_ == &::google::protobuf::internal::kEmptyString) {
    debug_file_name2_ = new ::std::string;
  }
  debug_file_name2_->assign(value);
}
inline void cam_ctrl_msg::set_debug_file_name2(const char* value) {
  set_has_debug_file_name2();
  if (debug_file_name2_ == &::google::protobuf::internal::kEmptyString) {
    debug_file_name2_ = new ::std::string;
  }
  debug_file_name2_->assign(value);
}
inline void cam_ctrl_msg::set_debug_file_name2(const char* value, size_t size) {
  set_has_debug_file_name2();
  if (debug_file_name2_ == &::google::protobuf::internal::kEmptyString) {
    debug_file_name2_ = new ::std::string;
  }
  debug_file_name2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cam_ctrl_msg::mutable_debug_file_name2() {
  set_has_debug_file_name2();
  if (debug_file_name2_ == &::google::protobuf::internal::kEmptyString) {
    debug_file_name2_ = new ::std::string;
  }
  return debug_file_name2_;
}
inline ::std::string* cam_ctrl_msg::release_debug_file_name2() {
  clear_has_debug_file_name2();
  if (debug_file_name2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = debug_file_name2_;
    debug_file_name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string debug_file_name3 = 34;
inline bool cam_ctrl_msg::has_debug_file_name3() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void cam_ctrl_msg::set_has_debug_file_name3() {
  _has_bits_[0] |= 0x00400000u;
}
inline void cam_ctrl_msg::clear_has_debug_file_name3() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void cam_ctrl_msg::clear_debug_file_name3() {
  if (debug_file_name3_ != &::google::protobuf::internal::kEmptyString) {
    debug_file_name3_->clear();
  }
  clear_has_debug_file_name3();
}
inline const ::std::string& cam_ctrl_msg::debug_file_name3() const {
  return *debug_file_name3_;
}
inline void cam_ctrl_msg::set_debug_file_name3(const ::std::string& value) {
  set_has_debug_file_name3();
  if (debug_file_name3_ == &::google::protobuf::internal::kEmptyString) {
    debug_file_name3_ = new ::std::string;
  }
  debug_file_name3_->assign(value);
}
inline void cam_ctrl_msg::set_debug_file_name3(const char* value) {
  set_has_debug_file_name3();
  if (debug_file_name3_ == &::google::protobuf::internal::kEmptyString) {
    debug_file_name3_ = new ::std::string;
  }
  debug_file_name3_->assign(value);
}
inline void cam_ctrl_msg::set_debug_file_name3(const char* value, size_t size) {
  set_has_debug_file_name3();
  if (debug_file_name3_ == &::google::protobuf::internal::kEmptyString) {
    debug_file_name3_ = new ::std::string;
  }
  debug_file_name3_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cam_ctrl_msg::mutable_debug_file_name3() {
  set_has_debug_file_name3();
  if (debug_file_name3_ == &::google::protobuf::internal::kEmptyString) {
    debug_file_name3_ = new ::std::string;
  }
  return debug_file_name3_;
}
inline ::std::string* cam_ctrl_msg::release_debug_file_name3() {
  clear_has_debug_file_name3();
  if (debug_file_name3_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = debug_file_name3_;
    debug_file_name3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string debug_file_name4 = 35;
inline bool cam_ctrl_msg::has_debug_file_name4() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void cam_ctrl_msg::set_has_debug_file_name4() {
  _has_bits_[0] |= 0x00800000u;
}
inline void cam_ctrl_msg::clear_has_debug_file_name4() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void cam_ctrl_msg::clear_debug_file_name4() {
  if (debug_file_name4_ != &::google::protobuf::internal::kEmptyString) {
    debug_file_name4_->clear();
  }
  clear_has_debug_file_name4();
}
inline const ::std::string& cam_ctrl_msg::debug_file_name4() const {
  return *debug_file_name4_;
}
inline void cam_ctrl_msg::set_debug_file_name4(const ::std::string& value) {
  set_has_debug_file_name4();
  if (debug_file_name4_ == &::google::protobuf::internal::kEmptyString) {
    debug_file_name4_ = new ::std::string;
  }
  debug_file_name4_->assign(value);
}
inline void cam_ctrl_msg::set_debug_file_name4(const char* value) {
  set_has_debug_file_name4();
  if (debug_file_name4_ == &::google::protobuf::internal::kEmptyString) {
    debug_file_name4_ = new ::std::string;
  }
  debug_file_name4_->assign(value);
}
inline void cam_ctrl_msg::set_debug_file_name4(const char* value, size_t size) {
  set_has_debug_file_name4();
  if (debug_file_name4_ == &::google::protobuf::internal::kEmptyString) {
    debug_file_name4_ = new ::std::string;
  }
  debug_file_name4_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cam_ctrl_msg::mutable_debug_file_name4() {
  set_has_debug_file_name4();
  if (debug_file_name4_ == &::google::protobuf::internal::kEmptyString) {
    debug_file_name4_ = new ::std::string;
  }
  return debug_file_name4_;
}
inline ::std::string* cam_ctrl_msg::release_debug_file_name4() {
  clear_has_debug_file_name4();
  if (debug_file_name4_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = debug_file_name4_;
    debug_file_name4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// value_item

// optional string str_name = 1;
inline bool value_item::has_str_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void value_item::set_has_str_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void value_item::clear_has_str_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void value_item::clear_str_name() {
  if (str_name_ != &::google::protobuf::internal::kEmptyString) {
    str_name_->clear();
  }
  clear_has_str_name();
}
inline const ::std::string& value_item::str_name() const {
  return *str_name_;
}
inline void value_item::set_str_name(const ::std::string& value) {
  set_has_str_name();
  if (str_name_ == &::google::protobuf::internal::kEmptyString) {
    str_name_ = new ::std::string;
  }
  str_name_->assign(value);
}
inline void value_item::set_str_name(const char* value) {
  set_has_str_name();
  if (str_name_ == &::google::protobuf::internal::kEmptyString) {
    str_name_ = new ::std::string;
  }
  str_name_->assign(value);
}
inline void value_item::set_str_name(const char* value, size_t size) {
  set_has_str_name();
  if (str_name_ == &::google::protobuf::internal::kEmptyString) {
    str_name_ = new ::std::string;
  }
  str_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* value_item::mutable_str_name() {
  set_has_str_name();
  if (str_name_ == &::google::protobuf::internal::kEmptyString) {
    str_name_ = new ::std::string;
  }
  return str_name_;
}
inline ::std::string* value_item::release_str_name() {
  clear_has_str_name();
  if (str_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_name_;
    str_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 uint32_idx = 2;
inline bool value_item::has_uint32_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void value_item::set_has_uint32_idx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void value_item::clear_has_uint32_idx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void value_item::clear_uint32_idx() {
  uint32_idx_ = 0u;
  clear_has_uint32_idx();
}
inline ::google::protobuf::uint32 value_item::uint32_idx() const {
  return uint32_idx_;
}
inline void value_item::set_uint32_idx(::google::protobuf::uint32 value) {
  set_has_uint32_idx();
  uint32_idx_ = value;
}

// optional uint32 uint32_type = 3 [default = 3];
inline bool value_item::has_uint32_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void value_item::set_has_uint32_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void value_item::clear_has_uint32_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void value_item::clear_uint32_type() {
  uint32_type_ = 3u;
  clear_has_uint32_type();
}
inline ::google::protobuf::uint32 value_item::uint32_type() const {
  return uint32_type_;
}
inline void value_item::set_uint32_type(::google::protobuf::uint32 value) {
  set_has_uint32_type();
  uint32_type_ = value;
}

// optional string str_value = 4;
inline bool value_item::has_str_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void value_item::set_has_str_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void value_item::clear_has_str_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void value_item::clear_str_value() {
  if (str_value_ != &::google::protobuf::internal::kEmptyString) {
    str_value_->clear();
  }
  clear_has_str_value();
}
inline const ::std::string& value_item::str_value() const {
  return *str_value_;
}
inline void value_item::set_str_value(const ::std::string& value) {
  set_has_str_value();
  if (str_value_ == &::google::protobuf::internal::kEmptyString) {
    str_value_ = new ::std::string;
  }
  str_value_->assign(value);
}
inline void value_item::set_str_value(const char* value) {
  set_has_str_value();
  if (str_value_ == &::google::protobuf::internal::kEmptyString) {
    str_value_ = new ::std::string;
  }
  str_value_->assign(value);
}
inline void value_item::set_str_value(const char* value, size_t size) {
  set_has_str_value();
  if (str_value_ == &::google::protobuf::internal::kEmptyString) {
    str_value_ = new ::std::string;
  }
  str_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* value_item::mutable_str_value() {
  set_has_str_value();
  if (str_value_ == &::google::protobuf::internal::kEmptyString) {
    str_value_ = new ::std::string;
  }
  return str_value_;
}
inline ::std::string* value_item::release_str_value() {
  clear_has_str_value();
  if (str_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_value_;
    str_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 uint32_value = 5;
inline bool value_item::has_uint32_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void value_item::set_has_uint32_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void value_item::clear_has_uint32_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void value_item::clear_uint32_value() {
  uint32_value_ = 0u;
  clear_has_uint32_value();
}
inline ::google::protobuf::uint32 value_item::uint32_value() const {
  return uint32_value_;
}
inline void value_item::set_uint32_value(::google::protobuf::uint32 value) {
  set_has_uint32_value();
  uint32_value_ = value;
}

// optional double double_value = 6;
inline bool value_item::has_double_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void value_item::set_has_double_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void value_item::clear_has_double_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void value_item::clear_double_value() {
  double_value_ = 0;
  clear_has_double_value();
}
inline double value_item::double_value() const {
  return double_value_;
}
inline void value_item::set_double_value(double value) {
  set_has_double_value();
  double_value_ = value;
}

// repeated string rpt_str_value = 7;
inline int value_item::rpt_str_value_size() const {
  return rpt_str_value_.size();
}
inline void value_item::clear_rpt_str_value() {
  rpt_str_value_.Clear();
}
inline const ::std::string& value_item::rpt_str_value(int index) const {
  return rpt_str_value_.Get(index);
}
inline ::std::string* value_item::mutable_rpt_str_value(int index) {
  return rpt_str_value_.Mutable(index);
}
inline void value_item::set_rpt_str_value(int index, const ::std::string& value) {
  rpt_str_value_.Mutable(index)->assign(value);
}
inline void value_item::set_rpt_str_value(int index, const char* value) {
  rpt_str_value_.Mutable(index)->assign(value);
}
inline void value_item::set_rpt_str_value(int index, const char* value, size_t size) {
  rpt_str_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* value_item::add_rpt_str_value() {
  return rpt_str_value_.Add();
}
inline void value_item::add_rpt_str_value(const ::std::string& value) {
  rpt_str_value_.Add()->assign(value);
}
inline void value_item::add_rpt_str_value(const char* value) {
  rpt_str_value_.Add()->assign(value);
}
inline void value_item::add_rpt_str_value(const char* value, size_t size) {
  rpt_str_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
value_item::rpt_str_value() const {
  return rpt_str_value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
value_item::mutable_rpt_str_value() {
  return &rpt_str_value_;
}

// optional uint32 uint32_invisibale = 8;
inline bool value_item::has_uint32_invisibale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void value_item::set_has_uint32_invisibale() {
  _has_bits_[0] |= 0x00000080u;
}
inline void value_item::clear_has_uint32_invisibale() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void value_item::clear_uint32_invisibale() {
  uint32_invisibale_ = 0u;
  clear_has_uint32_invisibale();
}
inline ::google::protobuf::uint32 value_item::uint32_invisibale() const {
  return uint32_invisibale_;
}
inline void value_item::set_uint32_invisibale(::google::protobuf::uint32 value) {
  set_has_uint32_invisibale();
  uint32_invisibale_ = value;
}

// -------------------------------------------------------------------

// tree_item

// optional string str_name = 1;
inline bool tree_item::has_str_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tree_item::set_has_str_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tree_item::clear_has_str_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tree_item::clear_str_name() {
  if (str_name_ != &::google::protobuf::internal::kEmptyString) {
    str_name_->clear();
  }
  clear_has_str_name();
}
inline const ::std::string& tree_item::str_name() const {
  return *str_name_;
}
inline void tree_item::set_str_name(const ::std::string& value) {
  set_has_str_name();
  if (str_name_ == &::google::protobuf::internal::kEmptyString) {
    str_name_ = new ::std::string;
  }
  str_name_->assign(value);
}
inline void tree_item::set_str_name(const char* value) {
  set_has_str_name();
  if (str_name_ == &::google::protobuf::internal::kEmptyString) {
    str_name_ = new ::std::string;
  }
  str_name_->assign(value);
}
inline void tree_item::set_str_name(const char* value, size_t size) {
  set_has_str_name();
  if (str_name_ == &::google::protobuf::internal::kEmptyString) {
    str_name_ = new ::std::string;
  }
  str_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tree_item::mutable_str_name() {
  set_has_str_name();
  if (str_name_ == &::google::protobuf::internal::kEmptyString) {
    str_name_ = new ::std::string;
  }
  return str_name_;
}
inline ::std::string* tree_item::release_str_name() {
  clear_has_str_name();
  if (str_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_name_;
    str_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 uint32_bchecked = 2;
inline bool tree_item::has_uint32_bchecked() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tree_item::set_has_uint32_bchecked() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tree_item::clear_has_uint32_bchecked() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tree_item::clear_uint32_bchecked() {
  uint32_bchecked_ = 0u;
  clear_has_uint32_bchecked();
}
inline ::google::protobuf::uint32 tree_item::uint32_bchecked() const {
  return uint32_bchecked_;
}
inline void tree_item::set_uint32_bchecked(::google::protobuf::uint32 value) {
  set_has_uint32_bchecked();
  uint32_bchecked_ = value;
}

// repeated .XZProto.value_item rpt_msg_value_item = 3;
inline int tree_item::rpt_msg_value_item_size() const {
  return rpt_msg_value_item_.size();
}
inline void tree_item::clear_rpt_msg_value_item() {
  rpt_msg_value_item_.Clear();
}
inline const ::XZProto::value_item& tree_item::rpt_msg_value_item(int index) const {
  return rpt_msg_value_item_.Get(index);
}
inline ::XZProto::value_item* tree_item::mutable_rpt_msg_value_item(int index) {
  return rpt_msg_value_item_.Mutable(index);
}
inline ::XZProto::value_item* tree_item::add_rpt_msg_value_item() {
  return rpt_msg_value_item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::XZProto::value_item >&
tree_item::rpt_msg_value_item() const {
  return rpt_msg_value_item_;
}
inline ::google::protobuf::RepeatedPtrField< ::XZProto::value_item >*
tree_item::mutable_rpt_msg_value_item() {
  return &rpt_msg_value_item_;
}

// repeated .XZProto.tree_item rpt_msg_tree_item = 4;
inline int tree_item::rpt_msg_tree_item_size() const {
  return rpt_msg_tree_item_.size();
}
inline void tree_item::clear_rpt_msg_tree_item() {
  rpt_msg_tree_item_.Clear();
}
inline const ::XZProto::tree_item& tree_item::rpt_msg_tree_item(int index) const {
  return rpt_msg_tree_item_.Get(index);
}
inline ::XZProto::tree_item* tree_item::mutable_rpt_msg_tree_item(int index) {
  return rpt_msg_tree_item_.Mutable(index);
}
inline ::XZProto::tree_item* tree_item::add_rpt_msg_tree_item() {
  return rpt_msg_tree_item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::XZProto::tree_item >&
tree_item::rpt_msg_tree_item() const {
  return rpt_msg_tree_item_;
}
inline ::google::protobuf::RepeatedPtrField< ::XZProto::tree_item >*
tree_item::mutable_rpt_msg_tree_item() {
  return &rpt_msg_tree_item_;
}

// -------------------------------------------------------------------

// tree_cfg

// repeated .XZProto.tree_item rpt_msg_tree_item = 1;
inline int tree_cfg::rpt_msg_tree_item_size() const {
  return rpt_msg_tree_item_.size();
}
inline void tree_cfg::clear_rpt_msg_tree_item() {
  rpt_msg_tree_item_.Clear();
}
inline const ::XZProto::tree_item& tree_cfg::rpt_msg_tree_item(int index) const {
  return rpt_msg_tree_item_.Get(index);
}
inline ::XZProto::tree_item* tree_cfg::mutable_rpt_msg_tree_item(int index) {
  return rpt_msg_tree_item_.Mutable(index);
}
inline ::XZProto::tree_item* tree_cfg::add_rpt_msg_tree_item() {
  return rpt_msg_tree_item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::XZProto::tree_item >&
tree_cfg::rpt_msg_tree_item() const {
  return rpt_msg_tree_item_;
}
inline ::google::protobuf::RepeatedPtrField< ::XZProto::tree_item >*
tree_cfg::mutable_rpt_msg_tree_item() {
  return &rpt_msg_tree_item_;
}

// -------------------------------------------------------------------

// enc_msg

// optional uint32 uint32_year = 1;
inline bool enc_msg::has_uint32_year() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void enc_msg::set_has_uint32_year() {
  _has_bits_[0] |= 0x00000001u;
}
inline void enc_msg::clear_has_uint32_year() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void enc_msg::clear_uint32_year() {
  uint32_year_ = 0u;
  clear_has_uint32_year();
}
inline ::google::protobuf::uint32 enc_msg::uint32_year() const {
  return uint32_year_;
}
inline void enc_msg::set_uint32_year(::google::protobuf::uint32 value) {
  set_has_uint32_year();
  uint32_year_ = value;
}

// optional bytes bytes_randon = 2;
inline bool enc_msg::has_bytes_randon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void enc_msg::set_has_bytes_randon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void enc_msg::clear_has_bytes_randon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void enc_msg::clear_bytes_randon() {
  if (bytes_randon_ != &::google::protobuf::internal::kEmptyString) {
    bytes_randon_->clear();
  }
  clear_has_bytes_randon();
}
inline const ::std::string& enc_msg::bytes_randon() const {
  return *bytes_randon_;
}
inline void enc_msg::set_bytes_randon(const ::std::string& value) {
  set_has_bytes_randon();
  if (bytes_randon_ == &::google::protobuf::internal::kEmptyString) {
    bytes_randon_ = new ::std::string;
  }
  bytes_randon_->assign(value);
}
inline void enc_msg::set_bytes_randon(const char* value) {
  set_has_bytes_randon();
  if (bytes_randon_ == &::google::protobuf::internal::kEmptyString) {
    bytes_randon_ = new ::std::string;
  }
  bytes_randon_->assign(value);
}
inline void enc_msg::set_bytes_randon(const void* value, size_t size) {
  set_has_bytes_randon();
  if (bytes_randon_ == &::google::protobuf::internal::kEmptyString) {
    bytes_randon_ = new ::std::string;
  }
  bytes_randon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* enc_msg::mutable_bytes_randon() {
  set_has_bytes_randon();
  if (bytes_randon_ == &::google::protobuf::internal::kEmptyString) {
    bytes_randon_ = new ::std::string;
  }
  return bytes_randon_;
}
inline ::std::string* enc_msg::release_bytes_randon() {
  clear_has_bytes_randon();
  if (bytes_randon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bytes_randon_;
    bytes_randon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 uint32_month = 3;
inline bool enc_msg::has_uint32_month() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void enc_msg::set_has_uint32_month() {
  _has_bits_[0] |= 0x00000004u;
}
inline void enc_msg::clear_has_uint32_month() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void enc_msg::clear_uint32_month() {
  uint32_month_ = 0u;
  clear_has_uint32_month();
}
inline ::google::protobuf::uint32 enc_msg::uint32_month() const {
  return uint32_month_;
}
inline void enc_msg::set_uint32_month(::google::protobuf::uint32 value) {
  set_has_uint32_month();
  uint32_month_ = value;
}

// optional uint32 uint32_day = 4;
inline bool enc_msg::has_uint32_day() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void enc_msg::set_has_uint32_day() {
  _has_bits_[0] |= 0x00000008u;
}
inline void enc_msg::clear_has_uint32_day() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void enc_msg::clear_uint32_day() {
  uint32_day_ = 0u;
  clear_has_uint32_day();
}
inline ::google::protobuf::uint32 enc_msg::uint32_day() const {
  return uint32_day_;
}
inline void enc_msg::set_uint32_day(::google::protobuf::uint32 value) {
  set_has_uint32_day();
  uint32_day_ = value;
}

// optional bytes bytes_serial = 5;
inline bool enc_msg::has_bytes_serial() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void enc_msg::set_has_bytes_serial() {
  _has_bits_[0] |= 0x00000010u;
}
inline void enc_msg::clear_has_bytes_serial() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void enc_msg::clear_bytes_serial() {
  if (bytes_serial_ != &::google::protobuf::internal::kEmptyString) {
    bytes_serial_->clear();
  }
  clear_has_bytes_serial();
}
inline const ::std::string& enc_msg::bytes_serial() const {
  return *bytes_serial_;
}
inline void enc_msg::set_bytes_serial(const ::std::string& value) {
  set_has_bytes_serial();
  if (bytes_serial_ == &::google::protobuf::internal::kEmptyString) {
    bytes_serial_ = new ::std::string;
  }
  bytes_serial_->assign(value);
}
inline void enc_msg::set_bytes_serial(const char* value) {
  set_has_bytes_serial();
  if (bytes_serial_ == &::google::protobuf::internal::kEmptyString) {
    bytes_serial_ = new ::std::string;
  }
  bytes_serial_->assign(value);
}
inline void enc_msg::set_bytes_serial(const void* value, size_t size) {
  set_has_bytes_serial();
  if (bytes_serial_ == &::google::protobuf::internal::kEmptyString) {
    bytes_serial_ = new ::std::string;
  }
  bytes_serial_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* enc_msg::mutable_bytes_serial() {
  set_has_bytes_serial();
  if (bytes_serial_ == &::google::protobuf::internal::kEmptyString) {
    bytes_serial_ = new ::std::string;
  }
  return bytes_serial_;
}
inline ::std::string* enc_msg::release_bytes_serial() {
  clear_has_bytes_serial();
  if (bytes_serial_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bytes_serial_;
    bytes_serial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace XZProto

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< XZProto::enum_cmd>() {
  return XZProto::enum_cmd_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< XZProto::enum_running_mode>() {
  return XZProto::enum_running_mode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< XZProto::enum_value_type>() {
  return XZProto::enum_value_type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocal_2eproto__INCLUDED
